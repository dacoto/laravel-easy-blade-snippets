{}{
	"Auth::attempt": {
		"prefix": "Auth::attempt",
		"body": "\nAuth::attempt(['email' => ${1:$$email}, 'password' => ${2:$$password}]);\n",
		"description": "The attempt method will return true if authentication was successful. Otherwise, false will be returned.",
		"scope": "source.php"
	},
	"Auth::check": {
		"prefix": "Auth::check",
		"body": "\nAuth::check();\n",
		"description": "Determine if the current user is authenticated.",
		"scope": "source.php"
	},
	"Auth::guard": {
		"prefix": "Auth::guard",
		"body": "\nAuth::guard($1);\n",
		"description": "Auth::guard",
		"scope": "source.php"
	},
	"Auth::guest": {
		"prefix": "Auth::guest",
		"body": "\nAuth::guest();\n",
		"description": "Determine if the current user is a guest.",
		"scope": "source.php"
	},
	"Auth::loginUsingId": {
		"prefix": "Auth::loginUsingId",
		"body": "\nAuth::loginUsingId($1);\n",
		"description": "To log a user into the application by their ID",
		"scope": "source.php"
	},
	"Auth::logout": {
		"prefix": "Auth::logout",
		"body": "\nAuth::logout();\n",
		"description": "Log the user out of the application.",
		"scope": "source.php"
	},
	"Auth::user": {
		"prefix": "Auth::user",
		"body": "\nAuth::user();\n",
		"description": "Get the currently authenticated user.",
		"scope": "source.php"
	},
	"Auth::viaRemember": {
		"prefix": "Auth::viaRemember",
		"body": "\nAuth::viaRemember();\n",
		"description": "Determine if the user was authenticated using the remember me cookie.",
		"scope": "source.php"
	},
	"Cache::add": {
		"prefix": "Cache::add",
		"body": "\nCache::add('${1:key}', ${2:$$value}, ${3:$$minutes});\n",
		"description": "Store an item in the Cache if it doesn't exist.",
		"scope": "source.php"
	},
	"Cache::decrement": {
		"prefix": "Cache::decrement",
		"body": "\nCache::decrement('${1:key}', ${2:$$amount});\n",
		"description": "Decrement a Cached value",
		"scope": "source.php"
	},
	"Cache::flush": {
		"prefix": "Cache::flush",
		"body": "\nCache::flush();\n",
		"description": "Remove all items from the cache.",
		"scope": "source.php"
	},
	"Cache::forever": {
		"prefix": "Cache::forever",
		"body": "\nCache::forever('${1:key}', ${2:$$value});\n",
		"description": "Store an item in the Cache Permanently",
		"scope": "source.php"
	},
	"Cache::forget": {
		"prefix": "Cache::forget",
		"body": "\nCache::forget('${1:key}');\n",
		"description": "Remove an Item from the Cache",
		"scope": "source.php"
	},
	"Cache::get": {
		"prefix": "Cache::get",
		"body": "\nCache::get('${1:key}', '${2:default}');\n",
		"description": "Retrieve an Item from the Cache",
		"scope": "source.php"
	},
	"Cache::has": {
		"prefix": "Cache::has",
		"body": "\nCache::has('${1:key}')\n",
		"description": "Check for existence in Cache",
		"scope": "source.php"
	},
	"Cache::increment": {
		"prefix": "Cache::increment",
		"body": "\nCache::increment('${1:key}', ${2:$$amount});\n",
		"description": "Increment a Cached value",
		"scope": "source.php"
	},
	"Cache::pull": {
		"prefix": "Cache::pull",
		"body": "\nCache::pull('${1:key}');\n",
		"description": "Pulling An Item From The Cache",
		"scope": "source.php"
	},
	"Cache::put": {
		"prefix": "Cache::put",
		"body": "\nCache::put('${1:key}', ${2:$$value}, ${3:$$minutes});\n",
		"description": "Store an item in the Cache (key, value, minutes)",
		"scope": "source.php"
	},
	"Cache::remember": {
		"prefix": "Cache::remember",
		"body": "\nCache::remember('${1:key}', ${2:$$minutes}, function() {\n    ${3://}\n});\n",
		"description": "Retrieve item or Store a default value if it doesn't exist",
		"scope": "source.php"
	},
	"Cache::rememberForever": {
		"prefix": "Cache::rememberForever",
		"body": "\nCache::rememberForever('${1:key}', function() {\n    ${2://}\n});\n",
		"description": "Retrieve item or Store a default value permanently",
		"scope": "source.php"
	},
	"Console::anticipate": {
		"prefix": "Console::anticipate",
		"body": "\n\\$this->anticipate('${1:Message}');\n",
		"description": "Give the user options for repsonse",
		"scope": "source.php"
	},
	"Console::ask": {
		"prefix": "Console::ask",
		"body": "\n\\$this->ask('${1:Question}');\n",
		"description": "Prompts the user with a question in the console",
		"scope": "source.php"
	},
	"Console::choice": {
		"prefix": "Console::choice",
		"body": "\n\\$this->choice('${1:What is your name?', ['Taylor', 'Dayle'], false});\n",
		"description": "Give the user a predefined set of choices",
		"scope": "source.php"
	},
	"Console::comment": {
		"prefix": "Console::comment",
		"body": "\n\\$this->comment('${1:Message}');\n",
		"description": "Log a comment to the console",
		"scope": "source.php"
	},
	"Console::error": {
		"prefix": "Console::error",
		"body": "\n\\$this->error('${1:Message}');\n",
		"description": "Log error to the console in red",
		"scope": "source.php"
	},
	"Console::info": {
		"prefix": "Console::info",
		"body": "\n\\$this->info('${1:Message}');\n",
		"description": "Log information to the console in green",
		"scope": "source.php"
	},
	"Console::line": {
		"prefix": "Console::line",
		"body": "\n\\$this->line('${1:Display this on the screen}');\n",
		"description": "Log plain information to the console",
		"scope": "source.php"
	},
	"Console::option": {
		"prefix": "Console::option",
		"body": "\n\\$this->option('${1}');\n",
		"description": "Get an option from constructor",
		"scope": "source.php"
	},
	"Console::question": {
		"prefix": "Console::question",
		"body": "\n\\$this->question('${1:Message}');\n",
		"description": "Logs a question to the console",
		"scope": "source.php"
	},
	"Console::secret": {
		"prefix": "Console::secret",
		"body": "\n\\$this->secret('${1:What is the password?}');\n",
		"description": "Prompt the user for hidden input",
		"scope": "source.php"
	},
	"Console::table": {
		"prefix": "Console::table",
		"body": "\n\\$this->table(${1:$$header}, ${2:$$row});\n",
		"description": "Prints a nicely formatted table to the console",
		"scope": "source.php"
	},
	"Console::warn": {
		"prefix": "Console::warn",
		"body": "\n\\$this->warn('${1:Message}');\n",
		"description": "Logs a warn message to the console",
		"scope": "source.php"
	},
	"Config::all": {
		"prefix": "Config::all",
		"body": "\nConfig::all();\n",
		"description": "Get all of the configuration items for the application.",
		"scope": "source.php"
	},
	"Config::get": {
		"prefix": "Config::get",
		"body": "\nConfig::get('${1:key}', '${2:default}');\n",
		"description": "Get the specified configuration value.",
		"scope": "source.php"
	},
	"Config::has": {
		"prefix": "Config::has",
		"body": "\nConfig::has('${1:key}')\n",
		"description": "Determine if the given configuration value exists.",
		"scope": "source.php"
	},
	"Config::set": {
		"prefix": "Config::set",
		"body": "\nConfig::set('${1:key}', ${2:$$value});\n",
		"description": "Set a given configuration value.",
		"scope": "source.php"
	},
	"Config::setMany": {
		"prefix": "Config::setMany",
		"body": "\nConfig::set([\n    '${1:key}' => ${2:$$value},\n]);\n",
		"description": "Set a given configuration value.",
		"scope": "source.php"
	},
	"Cookie::forever": {
		"prefix": "Cookie::forever",
		"body": "\n\\$response->withCookie(cookie()->forever('${1:key}', ${2:$$value}));\n",
		"description": "Make a Permanent Cookie",
		"scope": "source.php"
	},
	"Cookie::get": {
		"prefix": "Cookie::get",
		"body": "\n\\$request->cookie('${1:key}')\n",
		"description": "Retrieve a Cookie value",
		"scope": "source.php"
	},
	"Cookie::set": {
		"prefix": "Cookie::set",
		"body": "\n\\$response->withCookie(cookie('${1:key}', ${2:$$value}));\n",
		"description": "Attach a Cookie to a Response.",
		"scope": "source.php"
	},
	"Crypt::decrypt": {
		"prefix": "Crypt::decrypt",
		"body": "\ntry {\n    ${1:$$decrypted} = Crypt::decrypt(${2:$$encryptedValue});\n} catch (Illuminate\\Contracts\\Encryption\\DecryptException $$e) {\n    ${3://}\n}\n",
		"description": "Decrypt a value",
		"scope": "source.php"
	},
	"Crypt::encrypt": {
		"prefix": "Crypt::encrypt",
		"body": "\nCrypt::encrypt(${1:$$value});\n",
		"description": "Encrypt a value",
		"scope": "source.php"
	},
	"DB::delete": {
		"prefix": "DB::delete",
		"body": "\nDB::delete(${1:'delete users where name = ?'}${2:, ['John']})\n",
		"description": "Run an delete statement against the database.",
		"scope": "source.php"
	},
	"DB::insert": {
		"prefix": "DB::insert",
		"body": "\nDB::insert(${1:'insert into users (id, name) values (?, ?)'}${2:, [1, 'Dayle']})\n",
		"description": "Run an insert statement against the database.",
		"scope": "source.php"
	},
	"DB::select": {
		"prefix": "DB::select",
		"body": "\nDB::select(${1:'select * from users where active = ?'}${2:, [1]})\n",
		"description": "Run a select statement against the database.",
		"scope": "source.php"
	},
	"DB::select1": {
		"prefix": "DB::select",
		"body": "\nDB::statement(${1:'drop table users'})\n",
		"description": "Execute an SQL statement and return the boolean result.",
		"scope": "source.php"
	},
	"DB::transaction_begin": {
		"prefix": "DB::transaction_begin",
		"body": "\nDB::beginTransaction();\n",
		"description": "Start a new database transaction.",
		"scope": "source.php"
	},
	"DB::transaction_commit": {
		"prefix": "DB::transaction_commit",
		"body": "\nDB::commit();\n",
		"description": "Commit the active database transaction.",
		"scope": "source.php"
	},
	"DB::transaction_rollback": {
		"prefix": "DB::transaction_rollback",
		"body": "\nDB::rollback();\n",
		"description": "Rollback the active database transaction.",
		"scope": "source.php"
	},
	"DB::transaction": {
		"prefix": "DB::transaction",
		"body": "\nDB::transaction(function () {\n    ${1://}\n});\n",
		"description": "Execute a Closure within a transaction.",
		"scope": "source.php"
	},
	"DB::update": {
		"prefix": "DB::update",
		"body": "\nDB::update(${1:'update users set votes = 100 where name = ?'}${2:, ['John']})\n",
		"description": "Run an update statement against the database.",
		"scope": "source.php"
	},
	"Eloquent::reguard()": {
		"prefix": "Eloquent::reguard()",
		"body": "\nEloquent::reguard();\n",
		"description": "Renables any ability to throw mass assignment exceptions",
		"scope": "source.php"
	},
	"Eloquent::unguard()": {
		"prefix": "Eloquent::unguard()",
		"body": "\nEloquent::unguard();\n",
		"description": "Disables mass assignment exceptions from being thrown from model inserts and updates.",
		"scope": "source.php"
	},
	"Event::createClassListener": {
		"prefix": "Event::createClassListener",
		"body": "\nEvent::createClassListener(${1:listener});\n",
		"description": "Create a class based listener using the IoC container.",
		"scope": "source.php"
	},
	"Event::fire": {
		"prefix": "Event::fire",
		"body": "\nEvent::fire(${1:new MyCustomEvent()});\n",
		"description": "Fire an event and call the listeners.",
		"scope": "source.php"
	},
	"Event::firing": {
		"prefix": "Event::firing",
		"body": "\nEvent::firing()\n",
		"description": "Get the event that is currently firing.",
		"scope": "source.php"
	},
	"Event::flush": {
		"prefix": "Event::flush",
		"body": "\nEvent::flush('${1:event}');\n",
		"description": "Flush a set of pushed events.",
		"scope": "source.php"
	},
	"Event::forget": {
		"prefix": "Event::forget",
		"body": "\nEvent::forget('${1:event}');\n",
		"description": "Remove a set of listeners from the dispatcher.",
		"scope": "source.php"
	},
	"Event::getListeners": {
		"prefix": "Event::getListeners",
		"body": "\nEvent::getListeners('${1:eventName}');\n",
		"description": "Get all of the listeners for a given event name.",
		"scope": "source.php"
	},
	"Event::hasListeners": {
		"prefix": "Event::hasListeners",
		"body": "\nEvent::hasListeners('${1:eventName}');\n",
		"description": "Determine if a given event has listeners.",
		"scope": "source.php"
	},
	"Event::listen": {
		"prefix": "Event::listen",
		"body": "\nEvent::listen(${1:events}, ${2:listener}, ${3:priority});\n",
		"description": "Register an event listener with the dispatcher.",
		"scope": "source.php"
	},
	"Event::makeListener": {
		"prefix": "Event::makeListener",
		"body": "\nEvent::makeListener(${1:listener});\n",
		"description": "Register an event listener with the dispatcher.",
		"scope": "source.php"
	},
	"Event::push": {
		"prefix": "Event::push",
		"body": "\nEvent::push(${1:event}, ${2:payload});\n",
		"description": "Register an event and payload to be fired later.",
		"scope": "source.php"
	},
	"Event::subscribe": {
		"prefix": "Event::subscribe",
		"body": "\nEvent::subscribe(${1:subscriber});\n",
		"description": "Register an event subscriber with the dispatcher.",
		"scope": "source.php"
	},
	"Event::until": {
		"prefix": "Event::until",
		"body": "\nEvent::until(${1:event}, ${2:payload})\n",
		"description": "Fire an event until the first non-null response is returned.",
		"scope": "source.php"
	},
	"Hash::check": {
		"prefix": "Hash::check",
		"body": "\nHash::check(${1:$$value}, ${2:$$hashedValue})\n",
		"description": "Check the given plain value against a hash.",
		"scope": "source.php"
	},
	"Hash::make": {
		"prefix": "Hash::make",
		"body": "\nHash::make(${1:$$value})\n",
		"description": "Hash the given value.",
		"scope": "source.php"
	},
	"Hash::needsRehash": {
		"prefix": "Hash::needsRehash",
		"body": "\nif (Hash::needsRehash(${1:$$hashedValue}))\n{\n    ${2:$$hashed} = Hash::make(${3:$$value});\n}\n",
		"description": "Check if the given hash has been hashed using the given options.",
		"scope": "source.php"
	},
	"Helper::array_add": {
		"prefix": "Helper::array_add",
		"body": "\narray_add(${1:$$array}, ${2:'key'}, ${3:'value'});\n",
		"description": "Add an element to an array using \"dot\" notation if it doesn't exist.",
		"scope": "source.php"
	},
	"Helper::array_collapse": {
		"prefix": "Helper::array_collapse",
		"body": "\narray_collapse(${1:$$array});\n",
		"description": "Collapse an array of arrays into a single array.",
		"scope": "source.php"
	},
	"Helper::array-data_get": {
		"prefix": "Helper::array-data_get",
		"body": "\ndata_get(${1:$$array}, ${2:'names.john'}, ${3:'default'});\n",
		"description": "Get an item from an array using \"dot\" notation.",
		"scope": "source.php"
	},
	"Helper::array_divide": {
		"prefix": "Helper::array_divide",
		"body": "\nlist(${1:$$keys}, ${2:$$values}) = array_divide(${3:$$array});\n",
		"description": "Divide an array into two arrays. One with keys and the other with values.",
		"scope": "source.php"
	},
	"Helper::array_dot": {
		"prefix": "Helper::array_dot",
		"body": "\narray_dot(${1:$$array});\n",
		"description": "Flatten a multi-dimensional associative array with dots.",
		"scope": "source.php"
	},
	"Helper::array-last": {
		"prefix": "Helper::array-last",
		"body": "\nlast(${1:$$array);\n",
		"description": "Get the last element of an array. Useful for method chaining.",
		"scope": "source.php"
	},
	"Helper::array_except": {
		"prefix": "Helper::array_except",
		"body": "\narray_except(${1:$$array}, ${2:['key', 'otherKey']});\n",
		"description": "Get all of the given array except for a specified array of items.",
		"scope": "source.php"
	},
	"Helper::array_first": {
		"prefix": "Helper::array_first",
		"body": "\narray_first(${1:$$array}, function (${2:$$key}, ${3:$$value}) {\n    return ${4:$$value >= 150;}\n});\n",
		"description": "Return the first element in an array passing a given truth test.",
		"scope": "source.php"
	},
	"Helper::array_flatten": {
		"prefix": "Helper::array_flatten",
		"body": "\narray_flatten(${1:$$array});\n",
		"description": "Will flatten a multi-dimensional array into a single level.",
		"scope": "source.php"
	},
	"Helper::array_forget": {
		"prefix": "Helper::array_forget",
		"body": "\narray_forget(${1:$$array}, ${2:'names.joe'});\n",
		"description": "Remove one or many array items from a given array using \"dot\" notation.",
		"scope": "source.php"
	},
	"Helper::array_get": {
		"prefix": "Helper::array_get",
		"body": "\narray_get(${1:$$array}, ${2:'names.john'}, ${3:'default'});\n",
		"description": "Get an item from an array using \"dot\" notation.",
		"scope": "source.php"
	},
	"Helper::array_has": {
		"prefix": "Helper::array_has",
		"body": "\narray_has(${1:$$array}, ${2:key});\n",
		"description": "Check if an item exists in an array using \"dot\" notation.",
		"scope": "source.php"
	},
	"Helper::array-head": {
		"prefix": "Helper::array-head",
		"body": "\nhead(${1:$$array});\n",
		"description": "Get the first element of an array. Useful for method chaining.",
		"scope": "source.php"
	},
	"Helper::array_last": {
		"prefix": "Helper::array_last",
		"body": "\narray_last(${1:$$array}, function (${2:$$key}, ${3:$$value}) {\n    return ${4:$$value >= 150;}\n});\n",
		"description": "Return the last element in an array passing a given truth test.",
		"scope": "source.php"
	},
	"Helper::array_only": {
		"prefix": "Helper::array_only",
		"body": "\narray_only(${1:$$array}, ${2:['key', 'otherKey']});\n",
		"description": "Get a subset of the items from the given array.",
		"scope": "source.php"
	},
	"Helper::array_pluck": {
		"prefix": "Helper::array_pluck",
		"body": "\narray_pluck(${1:$$array}, ${2:'value'});\n",
		"description": "Pluck an array of values from an array.",
		"scope": "source.php"
	},
	"Helper::array_prepend": {
		"prefix": "Helper::array_prepend",
		"body": "\narray_prepend(${1:$$array}, ${2:'value'});\n",
		"description": "Push an item onto the beginning of an array.",
		"scope": "source.php"
	},
	"Helper::array_pull": {
		"prefix": "Helper::array_pull",
		"body": "\narray_pull(${1:$$array}, ${2:'value'});\n",
		"description": "Get a value from the array, and remove it.",
		"scope": "source.php"
	},
	"Helper::array_set": {
		"prefix": "Helper::array_set",
		"body": "\narray_set(${1:$$array}, ${2:'products.desk.price'}, ${3:200});\n",
		"description": "Set an array item to a given value using \"dot\" notation.",
		"scope": "source.php"
	},
	"Helper::array_sort_recursive": {
		"prefix": "Helper::array_sort_recursive",
		"body": "\narray_sort_recursive(${1:$$array});\n",
		"description": "Recursively sort an array by keys and values.",
		"scope": "source.php"
	},
	"Helper::array_sort": {
		"prefix": "Helper::array_sort",
		"body": "\narray_values(array_sort(${1:$$array}, function(${2:$$key}, ${3:$$value}) {\n    return ${3:$$value}['${4:name}'];\n}));\n",
		"description": "Sort the array using the given callback.",
		"scope": "source.php"
	},
	"Helper::array_where": {
		"prefix": "Helper::array_where",
		"body": "\narray_where(${2:$$array}, function(${3:$$key}, ${4:$$value}) {\n    return ${4:is_string($value);}\n});\n",
		"description": "Filter the array using the given callback.",
		"scope": "source.php"
	},
	"Helper::misc-class_uses_recursive": {
		"prefix": "Helper::misc-class_uses_recursive",
		"body": "\nclass_uses_recursive(${1:'Foo\\Bar\\Baz'});\n",
		"description": "Returns all traits used by a class, its subclasses and trait of their traits.",
		"scope": "source.php"
	},
	"Helper::misc-collect": {
		"prefix": "Helper::misc-collect",
		"body": "\ncollect(${1:'Foo\\Bar\\Baz'});\n",
		"description": "Create a collection from the given value.",
		"scope": "source.php"
	},
	"Helper::misc-csrf_field": {
		"prefix": "Helper::misc-csrf_field",
		"body": "\ncsrf_field();\n",
		"description": "Get the value of the current CSRF token.",
		"scope": "source.php"
	},
	"Helper::misc-csrf_token": {
		"prefix": "Helper::misc-csrf_token",
		"body": "\ncsrf_token();\n",
		"description": "Get the value of the current CSRF token.",
		"scope": "source.php"
	},
	"Helper::misc-dd": {
		"prefix": "Helper::misc-dd",
		"body": "\ndd(${1:$$value});\n",
		"description": "Dump the passed variables and end the script.",
		"scope": "source.php"
	},
	"Helper::misc-object_get": {
		"prefix": "Helper::misc-object_get",
		"body": "\nobject_get(${1:$$object, ${2:'names.john'}, ${3:'default'});\n",
		"description": "Get an item from an object using \"dot\" notation.",
		"scope": "source.php"
	},
	"Helper::misc-trait_uses_recursive": {
		"prefix": "Helper::misc-trait_uses_recursive",
		"body": "\ntrait_uses_recursive(${1:'Foo\\Bar\\Baz'});\n",
		"description": "Returns all traits used by a trait and its traits.",
		"scope": "source.php"
	},
	"Helper::path-app": {
		"prefix": "Helper::path-app",
		"body": "\napp_path();\n",
		"description": "Get the fully qualified path to the app directory.",
		"scope": "source.php"
	},
	"Helper::path-base": {
		"prefix": "Helper::path-base",
		"body": "\nbase_path(${1:'file'});\n",
		"description": "Get the fully qualified path to the root of the application install.",
		"scope": "source.php"
	},
	"Helper::path-config": {
		"prefix": "Helper::path-config",
		"body": "\nconfig_path();\n",
		"description": "Get the fully qualified path to the app directory.",
		"scope": "source.php"
	},
	"Helper::path-elixir": {
		"prefix": "Helper::path-elixir",
		"body": "\nelixir('${1:file}');\n",
		"description": "Get the path to the versionned Elixir file.",
		"scope": "source.php"
	},
	"Helper::path-public": {
		"prefix": "Helper::path-public",
		"body": "\npublic_path();\n",
		"description": "Get the fully qualified path to the public directory.",
		"scope": "source.php"
	},
	"Helper::path-storage": {
		"prefix": "Helper::path-storage",
		"body": "\nstorage_path(${1:'file'});\n",
		"description": "Get the fully qualified path to the app/storage directory.",
		"scope": "source.php"
	},
	"Helper::strings-camel_case": {
		"prefix": "Helper::strings-camel_case",
		"body": "\ncamel_case(${1:'foo_bar'});\n",
		"description": "Convert a value to camel case.",
		"scope": "source.php"
	},
	"Helper::strings-class_basename": {
		"prefix": "Helper::strings-class_basename",
		"body": "\nclass_basename(${1:'Foo\\Bar\\Baz'});\n",
		"description": "Get the class \"basename\" of the given object / class.",
		"scope": "source.php"
	},
	"Helper::strings-e": {
		"prefix": "Helper::strings-e",
		"body": "\ne(${1:'<html>foo</html>'});\n",
		"description": "Escape HTML entities in a string.",
		"scope": "source.php"
	},
	"Helper::strings-ends_with": {
		"prefix": "Helper::strings-ends_with",
		"body": "\nends_with(${1:'haystack'}, ${2:'needles'});\n",
		"description": "Determine if a given string ends with a given substring.",
		"scope": "source.php"
	},
	"Helper::strings-snake_case": {
		"prefix": "Helper::strings-snake_case",
		"body": "\nsnake_case(${1:'fooBar'});\n",
		"description": "Convert the given string to snake_case.",
		"scope": "source.php"
	},
	"Helper::strings-starts_with": {
		"prefix": "Helper::strings-starts_with",
		"body": "\nstarts_with(${1:'haystack'}, ${2:'needle'});\n",
		"description": "Determine if the given haystack begins with the given needle.",
		"scope": "source.php"
	},
	"Helper::strings-str_contains": {
		"prefix": "Helper::strings-str_contains",
		"body": "\nstr_contains(${1:'This is my name'}, ${2:'my'});\n",
		"description": "Determine if the given haystack contains the given needle.",
		"scope": "source.php"
	},
	"Helper::strings-str_finish": {
		"prefix": "Helper::strings-str_finish",
		"body": "\nstr_finish(${1:'this/string'}, ${2:'/'});\n",
		"description": "Determine if a given string matches a given pattern. Asterisks may be used to indicate wildcards.",
		"scope": "source.php"
	},
	"Helper::strings-str_is": {
		"prefix": "Helper::strings-str_is",
		"body": "\nstr_is(${1:'foo*'}, ${2:'foobar'});\n",
		"description": "Add a single instance of the given needle to the haystack. Remove any extra instances.",
		"scope": "source.php"
	},
	"Helper::strings-str_limit": {
		"prefix": "Helper::strings-str_limit",
		"body": "\nstr_limit(${1:$$value}, ${2:100})\n",
		"description": "Limit the number of characters in a string.",
		"scope": "source.php"
	},
	"Helper::strings-str_random": {
		"prefix": "Helper::strings-str_random",
		"body": "\nstr_random(${1:40});\n",
		"description": "Generate a random string of the given length.",
		"scope": "source.php"
	},
	"Helper::strings-str_singular": {
		"prefix": "Helper::strings-str_singular",
		"body": "\nstr_singular(${1:'string'});\n",
		"description": "Convert a string to its singular form (English only).",
		"scope": "source.php"
	},
	"Helper::strings-str_slug": {
		"prefix": "Helper::strings-str_slug",
		"body": "\nstr_slug(${1:'fooBar'});\n",
		"description": "Generate a URL friendly \"slug\" from a given string.",
		"scope": "source.php"
	},
	"Helper::strings-studly_case": {
		"prefix": "Helper::strings-studly_case",
		"body": "\nstudly_case(${1:'foo_bar'});\n",
		"description": "Convert the given string to StudlyCase.",
		"scope": "source.php"
	},
	"Helper::strings-title_case": {
		"prefix": "Helper::strings-title_case",
		"body": "\ntitle_case(${1:'fooBar'});\n",
		"description": "Convert a value to title case.",
		"scope": "source.php"
	},
	"Helper::strings-trans": {
		"prefix": "Helper::strings-trans",
		"body": "\ntrans(${1:'validation.required'}):\n",
		"description": "Translate a given language line. Alias of Lang::get.",
		"scope": "source.php"
	},
	"Helper::strings-trans_choice": {
		"prefix": "Helper::strings-trans_choice",
		"body": "\ntrans_choice(${1:'foo.bar'}, ${2:$$count});\n",
		"description": "Translate a given language line with inflection. Alias of Lang::choice.",
		"scope": "source.php"
	},
	"Helper::strings-str_plural": {
		"prefix": "Helper::strings-str_plural",
		"body": "\nstr_plural(${1:'string'});\n",
		"description": "Convert a string to its plural form (English only).",
		"scope": "source.php"
	},
	"Helper::url-action": {
		"prefix": "Helper::url-action",
		"body": "\naction(${1:'HomeController@getIndex'}, ${2:$$params});\n",
		"description": "Generate a URL for a given controller action.",
		"scope": "source.php"
	},
	"Helper::url-asset": {
		"prefix": "Helper::url-asset",
		"body": "\nasset(${1:'img/photo.jpg'});\n",
		"description": "Generate a URL for an asset.",
		"scope": "source.php"
	},
	"Helper::url-route": {
		"prefix": "Helper::url-route",
		"body": "\nroute(${1:'routeName'}, ${2:$$params});\n",
		"description": "Generate a URL for a given named route.",
		"scope": "source.php"
	},
	"Helper::url-secure_asset": {
		"prefix": "Helper::url-secure_asset",
		"body": "\nsecure_asset(${1:'foo/bar'}, ${2:$$title}, ${3:$$attributes});\n",
		"description": "Generate a HTML link to the given asset using HTTPS.",
		"scope": "source.php"
	},
	"Helper::secure_url": {
		"prefix": "Helper::secure_url",
		"body": "\nsecure_url(${1:'foo/bar'}, ${2:$$parameters});\n",
		"description": "Generate a fully qualified URL to a given path using HTTPS.",
		"scope": "source.php"
	},
	"Helper::url-url": {
		"prefix": "Helper::url-url",
		"body": "\nurl(${1:'foo/bar'}, ${2:$$parameters}, ${3:$$secure});\n",
		"description": "Generate a fully qualified URL to the given path.",
		"scope": "source.php"
	},
	"Input::all": {
		"prefix": "Input::all",
		"body": "\n\\$request->all();\n",
		"description": "Retrieve all Inputs",
		"scope": "source.php"
	},
	"Input::except": {
		"prefix": "Input::except",
		"body": "\n\\$request->except(${1:['key', 'otherKey']});\n",
		"description": "Retrieve only some of the Request Input",
		"scope": "source.php"
	},
	"Input::exists": {
		"prefix": "Input::exists",
		"body": "\n\\$request->exists('${1:key}')\n",
		"description": "Determine if the request contains a given input item key.",
		"scope": "source.php"
	},
	"Input::file": {
		"prefix": "Input::file",
		"body": "\n\\$request->file('${1:key}');\n",
		"description": "Retrieve Uploaded File",
		"scope": "source.php"
	},
	"Input::fileMove": {
		"prefix": "Input::fileMove",
		"body": "\n\\$request->file('${1:key}')->move(${2:$$destinationPath}, ${3:$$fileName});\n",
		"description": "Move an Uploaded File",
		"scope": "source.php"
	},
	"Input::flash": {
		"prefix": "Input::flash",
		"body": "\n\\$request->flash();\n",
		"description": "Flash Input to the Session",
		"scope": "source.php"
	},
	"Input::flashExcept": {
		"prefix": "Input::flashExcept",
		"body": "\n\\$request->flashExcept(${1:['key', 'otherKey']});\n",
		"description": "Flash only some Input to the Session",
		"scope": "source.php"
	},
	"Input::flashOnly": {
		"prefix": "Input::flashOnly",
		"body": "\n\\$request->flashOnly('${1:['key', 'otherKey']}');\n",
		"description": "Flash only some Input to the Session",
		"scope": "source.php"
	},
	"Input::get": {
		"prefix": "Input::get",
		"body": "\n\\$request->input('${1:key}');\n",
		"description": "Retrieve an Input value",
		"scope": "source.php"
	},
	"Input::getWithDefault": {
		"prefix": "Input::getWithDefault",
		"body": "\n\\$request->input('${1:key}', ${2:'default'});\n",
		"description": "Retrieve an Input value with Default",
		"scope": "source.php"
	},
	"Input::has": {
		"prefix": "Input::has",
		"body": "\n\\$request->has('${1:key}')\n",
		"description": "Determine if the request contains a non-empty value for an input item.",
		"scope": "source.php"
	},
	"Input::hasFile": {
		"prefix": "Input::hasFile",
		"body": "\n\\$request->hasFile('${1:key}');\n",
		"description": "Determine if File was Uploaded",
		"scope": "source.php"
	},
	"Input::old": {
		"prefix": "Input::old",
		"body": "\n\\$request->old('${1:key}');\n",
		"description": "Retrieve Old Data",
		"scope": "source.php"
	},
	"Input::oldWithDefault": {
		"prefix": "Input::oldWithDefault",
		"body": "\n\\$request->old('${1:key}', ${2:'default'});\n",
		"description": "Retrieve Old Data with Default",
		"scope": "source.php"
	},
	"Input::only": {
		"prefix": "Input::only",
		"body": "\n\\$request->only(${1:['key', 'otherKey']});\n",
		"description": "Retrieve only some of the Request Input",
		"scope": "source.php"
	},
	"Log::alert": {
		"prefix": "Log::alert",
		"body": "\nLog::alert('${1:message}');\n",
		"description": "Log an alert message to the logs.",
		"scope": "source.php"
	},
	"Log::critical": {
		"prefix": "Log::critical",
		"body": "\nLog::critical('${1:message}');\n",
		"description": "Log a critical message to the logs.",
		"scope": "source.php"
	},
	"Log::debug": {
		"prefix": "Log::debug",
		"body": "\nLog::debug('${1:message}');\n",
		"description": "Log a debug message to the logs.",
		"scope": "source.php"
	},
	"Log::emergency": {
		"prefix": "Log::emergency",
		"body": "\nLog::emergency('${1:message}');\n",
		"description": "Log an emergency message to the logs.",
		"scope": "source.php"
	},
	"Log::error": {
		"prefix": "Log::error",
		"body": "\nLog::error('${1:message}');\n",
		"description": "Log an error message to the logs.",
		"scope": "source.php"
	},
	"Log::info": {
		"prefix": "Log::info",
		"body": "\nLog::info('${1:message}');\n",
		"description": "Log an informational message to the logs.",
		"scope": "source.php"
	},
	"Log::log": {
		"prefix": "Log::log",
		"body": "\nLog::log('${1:level}', '${2:message}'');\n",
		"description": "Log a message to the logs.",
		"scope": "source.php"
	},
	"Log::notice": {
		"prefix": "Log::notice",
		"body": "\nLog::notice(${1:message});\n",
		"description": "Log a notice to the logs.",
		"scope": "source.php"
	},
	"Log::useDailyFiles": {
		"prefix": "Log::useDailyFiles",
		"body": "\nLog::useDailyFiles('${1:path}', ${2:days}, '${3:level}');\n",
		"description": "Register a daily file log handler.",
		"scope": "source.php"
	},
	"Log::useFiles": {
		"prefix": "Log::useFiles",
		"body": "\nLog::useFiles('${1:path}', '${2:level}');\n",
		"description": "Register a file log handler.",
		"scope": "source.php"
	},
	"Log::warning": {
		"prefix": "Log::warning",
		"body": "\nLog::warning('${1:message}');\n",
		"description": "Log a warning message to the logs.",
		"scope": "source.php"
	},
	"Mail::later": {
		"prefix": "Mail::later",
		"body": "\nMail::later(${1:5}, '${2:Html.view}', ${3:$$data}, function (${4:$$message}) {\n    ${4}->from(${5:'john@johndoe.com'}, ${6:'John Doe'});\n    ${4}->sender(${7:'john@johndoe.com'}, ${8:'John Doe'});\n\n    ${4}->to(${9:'john@johndoe.com'}, ${10:'John Doe'});\n\n    ${4}->cc(${11:'john@johndoe.com'}, ${12:'John Doe'});\n    ${4}->bcc(${13:'john@johndoe.com'}, ${14:'John Doe'});\n\n    ${4}->replyTo(${15:'john@johndoe.com'}, ${16:'John Doe'});\n\n    ${4}->subject(${17:'Subject'});\n\n    ${4}->priority(${18:3});\n\n    ${4}->attach(${19:'pathToFile'});\n});\n",
		"description": "Queue a new e-mail message for sending after (n) seconds.",
		"scope": "source.php"
	},
	"Mail::laterOn": {
		"prefix": "Mail::laterOn",
		"body": "\nMail::queueOn(${1:'queue-name'}, ${2:5}, '${3:Html.view}', ${4:$$data}, function (${5:$$message}) {\n    ${5}->from(${6:'john@johndoe.com'}, ${7:'John Doe'});\n    ${5}->sender(${8:'john@johndoe.com'}, ${9:'John Doe'});\n\n    ${5}->to(${10:'john@johndoe.com'}, ${11:'John Doe'});\n\n    ${5}->cc(${12:'john@johndoe.com'}, ${13:'John Doe'});\n    ${5}->bcc(${14:'john@johndoe.com'}, ${15:'John Doe'});\n\n    ${5}->replyTo(${16:'john@johndoe.com'}, ${17:'John Doe'});\n\n    ${5}->subject(${18:'Subject'});\n\n    ${5}->priority(${19:3});\n\n    ${5}->attach(${20:'pathToFile'});\n});\n",
		"description": "Queue a new e-mail message for sending after (n) seconds on the given queue.",
		"scope": "source.php"
	},
	"Mail::plain": {
		"prefix": "Mail::plain",
		"body": "\nMail::plain('${1:plainText.view}', ${2:$$data}, function (${3:$$message}) {\n    ${3}->from(${4:'john@johndoe.com'}, ${5:'John Doe'});\n    ${3}->sender(${6:'john@johndoe.com'}, ${7:'John Doe'});\n\n    ${3}->to(${8:'john@johndoe.com'}, ${9:'John Doe'});\n\n    ${3}->cc(${10:'john@johndoe.com'}, ${11:'John Doe'});\n    ${3}->bcc(${12:'john@johndoe.com'}, ${13:'John Doe'});\n\n    ${3}->replyTo(${14:'john@johndoe.com'}, ${15:'John Doe'});\n\n    ${3}->subject(${16:'Subject'});\n\n    ${3}->priority(${17:3});\n\n    ${3}->attach(${18:'pathToFile'});\n});\n",
		"description": "Send a new message when only a plain part.",
		"scope": "source.php"
	},
	"Mail::queue": {
		"prefix": "Mail::queue",
		"body": "\nMail::queue('${1:Html.view}', ${2:$$data}, function (${3:$$message}) {\n    ${3}->from(${4:'john@johndoe.com'}, ${5:'John Doe'});\n    ${3}->sender(${6:'john@johndoe.com'}, ${7:'John Doe'});\n\n    ${3}->to(${8:'john@johndoe.com'}, ${9:'John Doe'});\n\n    ${3}->cc(${10:'john@johndoe.com'}, ${11:'John Doe'});\n    ${3}->bcc(${12:'john@johndoe.com'}, ${13:'John Doe'});\n\n    ${3}->replyTo(${14:'john@johndoe.com'}, ${15:'John Doe'});\n\n    ${3}->subject(${16:'Subject'});\n\n    ${3}->priority(${17:3});\n\n    ${3}->attach(${18:'pathToFile'});\n});\n",
		"description": "Queue a new e-mail message for sending.",
		"scope": "source.php"
	},
	"Mail::queueOn": {
		"prefix": "Mail::queueOn",
		"body": "\nMail::queueOn(${1:'queue-name'}, '${2:Html.view}', ${3:$$data}, function (${4:$$message}) {\n    ${4}->from(${5:'john@johndoe.com'}, ${6:'John Doe'});\n    ${4}->sender(${7:'john@johndoe.com'}, ${8:'John Doe'});\n\n    ${4}->to(${9:'john@johndoe.com'}, ${10:'John Doe'});\n\n    ${4}->cc(${11:'john@johndoe.com'}, ${12:'John Doe'});\n    ${4}->bcc(${13:'john@johndoe.com'}, ${14:'John Doe'});\n\n    ${4}->replyTo(${15:'john@johndoe.com'}, ${16:'John Doe'});\n\n    ${4}->subject(${17:'Subject'});\n\n    ${4}->priority(${18:3});\n\n    ${4}->attach(${19:'pathToFile'});\n});\n",
		"description": "Queue a new e-mail message for sending on the given queue.",
		"scope": "source.php"
	},
	"Mail::raw": {
		"prefix": "Mail::raw",
		"body": "\nMail::raw('${1:plain text message}', function (${2:$$message}) {\n    ${2}->from(${3:'john@johndoe.com'}, ${4:'John Doe'});\n    ${2}->sender(${5:'john@johndoe.com'}, ${6:'John Doe'});\n\n    ${2}->to(${7:'john@johndoe.com'}, ${8:'John Doe'});\n\n    ${2}->cc(${9:'john@johndoe.com'}, ${10:'John Doe'});\n    ${2}->bcc(${11:'john@johndoe.com'}, ${12:'John Doe'});\n\n    ${2}->replyTo(${13:'john@johndoe.com'}, ${14:'John Doe'});\n\n    ${2}->subject(${15:'Subject'});\n\n    ${2}->priority(${16:3});\n\n    ${2}->attach(${17:'pathToFile'});\n});\n",
		"description": "Send a new message when only a raw text part.",
		"scope": "source.php"
	},
	"Mail::send": {
		"prefix": "Mail::send",
		"body": "\nMail::send('${1:Html.view}', ${2:$$data}, function (${3:$$message}) {\n    ${3}->from(${4:'john@johndoe.com'}, ${5:'John Doe'});\n    ${3}->sender(${6:'john@johndoe.com'}, ${7:'John Doe'});\n\n    ${3}->to(${8:'john@johndoe.com'}, ${9:'John Doe'});\n\n    ${3}->cc(${10:'john@johndoe.com'}, ${11:'John Doe'});\n    ${3}->bcc(${12:'john@johndoe.com'}, ${13:'John Doe'});\n\n    ${3}->replyTo(${14:'john@johndoe.com'}, ${15:'John Doe'});\n\n    ${3}->subject(${16:'Subject'});\n\n    ${3}->priority(${17:3});\n\n    ${3}->attach(${18:'pathToFile'});\n});\n",
		"description": "Send a new message using a view.",
		"scope": "source.php"
	},
	"Redirect::action": {
		"prefix": "Redirect::action",
		"body": "\nreturn redirect()->action('${App\\Http\\Controllers\\HomeController@index}', ${2:['parameterKey' => 'value']});\n",
		"description": "Redirect to a controller action, with parameters",
		"scope": "source.php"
	},
	"Redirect::back": {
		"prefix": "Redirect::back",
		"body": "\nreturn redirect()->back()${1:->withErrors($validator)}${2:->withInput()};\n",
		"description": "Redirect to URL, Route or Controller",
		"scope": "source.php"
	},
	"Redirect::namedRoute": {
		"prefix": "Redirect::namedRoute",
		"body": "\nreturn redirect()->route('${named_route}', ${2:['parameterKey' => 'value']})\n",
		"description": "Redirect to a named route, with parameters",
		"scope": "source.php"
	},
	"Redirect::to": {
		"prefix": "Redirect::to",
		"body": "\nreturn redirect('${1:some/url}')\n",
		"description": "Redirect to URL, Route or Controller",
		"scope": "source.php"
	},
	"Redirect::withErrors": {
		"prefix": "Redirect::withErrors",
		"body": "\n->withErrors(${2:$$validator})\n",
		"description": "Redirect to URL, Route or Controller with Errors",
		"scope": "source.php"
	},
	"Redirect::withFlashData": {
		"prefix": "Redirect::withFlashData",
		"body": "\n->with('${1:flashKey}', '${2:flashValue}')\n",
		"description": "Redirect to URL, Route or Controller with Flash Data",
		"scope": "source.php"
	},
	"Redirect::withInput": {
		"prefix": "Redirect::withInput",
		"body": "\n->withInput(${1:[1, 2])})\n",
		"description": "Redirect to URL, Route or Controller with Input",
		"scope": "source.php"
	},
	"Redirect::withInputAndErrors": {
		"prefix": "Redirect::withInputAndErrors",
		"body": "\n->withInput(${1:\\$request->except('key')})\n->withErrors(${2:$$validator})\n",
		"description": "Redirect with Inputs and Errors",
		"scope": "source.php"
	},
	"Redirect::withNamedInput": {
		"prefix": "Redirect::withNamedInput",
		"body": "\n->withInput(${1:['key' => 'value'])})\n",
		"description": "Redirect to URL, Route or Controller with Input",
		"scope": "source.php"
	},
	"Relation::belongsTo": {
		"prefix": "Relation::belongsTo",
		"body": "\npublic function ${1:user}()\n{\n    return $this->belongsTo('${2:App\\User}'${3:, '${4:foreign_key}'}${5:, '${6:other_key}'});\n}\n",
		"description": "A one-to-one inverse relationship.",
		"scope": "source.php"
	},
	"Relation::belongsToMany": {
		"prefix": "Relation::belongsToMany",
		"body": "\npublic function ${1:roles}()\n{\n    return $this->belongsToMany('${2:App\\Role}'${3:, '${4:role_user_table}'}${5:, '${6:user_id}'}${7:, '${8:role_id}'});\n}\n",
		"description": "A many-to-many relationship.",
		"scope": "source.php"
	},
	"Relation::hasMany": {
		"prefix": "Relation::hasMany",
		"body": "\npublic function ${1:comments}()\n{\n    return $this->hasMany('${2:App\\Comment}'${3:, '${4:foreign_key}'}${5:, '${6:local_key}'});\n}\n",
		"description": "A one-to-many relationship.",
		"scope": "source.php"
	},
	"Relation::hasManyThrough": {
		"prefix": "Relation::hasManyThrough",
		"body": "\npublic function ${1:comments}()\n{\n    return $this->hasManyThrough('${2:App\\Comment}', ${3:App\\Post});\n}\n",
		"description": "A Has Many Through relationship.",
		"scope": "source.php"
	},
	"Relation::hasOne": {
		"prefix": "Relation::hasOne",
		"body": "\npublic function ${1:user}()\n{\n    return $this->hasOne('${2:App\\User}'${3:, '${4:foreign_key}'}${5:, '${6:local_key}'});\n}\n",
		"description": "A one-to-one relationship.",
		"scope": "source.php"
	},
	"Request::ajax": {
		"prefix": "Request::ajax",
		"body": "\n\\$request->ajax()\n",
		"description": "Determine if the request is the result of an AJAX call.",
		"scope": "source.php"
	},
	"Request::all": {
		"prefix": "Request::all",
		"body": "\n\\$request->all()\n",
		"description": "Get all of the input and files for the request.",
		"scope": "source.php"
	},
	"Request::allFiles": {
		"prefix": "Request::allFiles",
		"body": "\n\\$request->allFiles()\n",
		"description": "Get an array of all of the files on the request.",
		"scope": "source.php"
	},
	"Request::decodedPath": {
		"prefix": "Request::decodedPath",
		"body": "\n\\$request->decodedPath()\n",
		"description": "Get the current encoded path info for the request.",
		"scope": "source.php"
	},
	"Request::except": {
		"prefix": "Request::except",
		"body": "\n\\$request->except(${1:['key', 'otherKey']})\n",
		"description": "Get all of the input except for a specified array of items.",
		"scope": "source.php"
	},
	"Request::exists": {
		"prefix": "Request::exists",
		"body": "\n\\$request->exists(${1:'key'})\n",
		"description": "Determine if the request contains a given input item key.",
		"scope": "source.php"
	},
	"Request::file": {
		"prefix": "Request::file",
		"body": "\n\\$request->file(${1:'key'}${2:, 'default'})\n",
		"description": "Retrieve a file from the request.",
		"scope": "source.php"
	},
	"Request::fingerprint": {
		"prefix": "Request::fingerprint",
		"body": "\n\\$request->fingerprint()\n",
		"description": "Get a unique fingerprint for the request / route / IP address.",
		"scope": "source.php"
	},
	"Request::fullRrl": {
		"prefix": "Request::fullRrl",
		"body": "\n\\$request->fullUrl()\n",
		"description": "Get the full URL for the request.",
		"scope": "source.php"
	},
	"Request::has": {
		"prefix": "Request::has",
		"body": "\n\\$request->has(${1:'key'})\n",
		"description": "Determine if the request contains a non-empty value for an input item.",
		"scope": "source.php"
	},
	"Request::has1": {
		"prefix": "Request::has",
		"body": "\n\\$request->has(${1:'key'})\n",
		"description": "Determine if the uploaded data contains a file.",
		"scope": "source.php"
	},
	"Request::header": {
		"prefix": "Request::header",
		"body": "\n\\$request->header(${1:'key'}, '${2:default'})\n",
		"description": "Retrieve a header from the request.",
		"scope": "source.php"
	},
	"Request::input": {
		"prefix": "Request::input",
		"body": "\n\\$request->input(${1:'key'}${2:, 'default'})\n",
		"description": "Retrieve an input item from the request.",
		"scope": "source.php"
	},
	"Request::ip": {
		"prefix": "Request::ip",
		"body": "\n\\$request->ip()\n",
		"description": "Returns the client IP address.",
		"scope": "source.php"
	},
	"Request::ips": {
		"prefix": "Request::ips",
		"body": "\n\\$request->ips()\n",
		"description": "Returns the client IP addresses.",
		"scope": "source.php"
	},
	"Request::json": {
		"prefix": "Request::json",
		"body": "\n\\$request->json()\n",
		"description": "Determine if the request is sending JSON.",
		"scope": "source.php"
	},
	"Request::method": {
		"prefix": "Request::method",
		"body": "\n\\$request->method();\n",
		"description": "Get the request method (GET, POST, ...).",
		"scope": "source.php"
	},
	"Request::old": {
		"prefix": "Request::old",
		"body": "\n\\$request->old(${1:'key'}${2:, 'default'})\n",
		"description": "Retrieve an old input item.",
		"scope": "source.php"
	},
	"Request::only": {
		"prefix": "Request::only",
		"body": "\n\\$request->only(${1:['key', 'otherKey']})\n",
		"description": "Get a subset of the items from the input data.",
		"scope": "source.php"
	},
	"Request::path": {
		"prefix": "Request::path",
		"body": "\n\\$request->path()\n",
		"description": "Get the current path info for the request.",
		"scope": "source.php"
	},
	"Request::pjax": {
		"prefix": "Request::pjax",
		"body": "\n\\$request->pjax()\n",
		"description": "Determine if the request is the result of an PJAX call.",
		"scope": "source.php"
	},
	"Request::query": {
		"prefix": "Request::query",
		"body": "\n\\$request->query(${1:'key'}, '${2:default'})\n",
		"description": "Retrieve a query string item from the request.",
		"scope": "source.php"
	},
	"Request::root": {
		"prefix": "Request::root",
		"body": "\n\\$request->root()\n",
		"description": "Get the root URL for the application.",
		"scope": "source.php"
	},
	"Request::secure": {
		"prefix": "Request::secure",
		"body": "\n\\$request->secure()\n",
		"description": "Determine if the request is over HTTPS.",
		"scope": "source.php"
	},
	"Request::segment": {
		"prefix": "Request::segment",
		"body": "\n\\$request->segment(${1:$$index}, '${2:default}')\n",
		"description": "Get a segment from the URI (1 based index).",
		"scope": "source.php"
	},
	"Request::segments": {
		"prefix": "Request::segments",
		"body": "\n\\$request->segments()\n",
		"description": "Get all of the segments for the request path.",
		"scope": "source.php"
	},
	"Request::session": {
		"prefix": "Request::session",
		"body": "\n\\$request->session()\n",
		"description": "Get the session associated with the request.",
		"scope": "source.php"
	},
	"Request::url": {
		"prefix": "Request::url",
		"body": "\n\\$request->url()\n",
		"description": "Get the URL (no query string) for the request.",
		"scope": "source.php"
	},
	"Request::user": {
		"prefix": "Request::user",
		"body": "\n\\$request->user()\n",
		"description": "Get the user making the request.",
		"scope": "source.php"
	},
	"Response::download": {
		"prefix": "Response::download",
		"body": "\nreturn response()->download(${1:$$pathToFile}${2:[, $name]}, ${3:[, $headers]});\n",
		"description": "Create a File Download Response",
		"scope": "source.php"
	},
	"Response::json": {
		"prefix": "Response::json",
		"body": "\nreturn response()->json(${1:$$data}${2:[, 200]}${3:[, $headers]});\n",
		"description": "Create a JSON Response",
		"scope": "source.php"
	},
	"Response::jsonp": {
		"prefix": "Response::jsonp",
		"body": "\nreturn response()->jsonp(${1:$$callback}, ${2:$$data}${3:[, 200]}${4:[, $headers]});\n",
		"description": "Create a JSONP Response",
		"scope": "source.php"
	},
	"Response::make": {
		"prefix": "Response::make",
		"body": "\nreturn Response::make(${1:$$contents}${2:[, 200]}${3:[, $headers]});\n",
		"description": "Create a Custom Response",
		"scope": "source.php"
	},
	"Route::any": {
		"prefix": "Route::any",
		"body": "\nRoute::any('${2:users/{id}}', function(${3:$$id}) {\n    ${4://}\n});\n",
		"description": "Basic Route with Closure.",
		"scope": "source.php"
	},
	"Route::closure": {
		"prefix": "Route::closure",
		"body": "\nRoute::${1:get}('${2:users/{id}}', function(${3:$$id}) {\n    ${4://}\n});\n",
		"description": "Basic Route with Closure.",
		"scope": "source.php"
	},
	"Route::controller": {
		"prefix": "Route::controller",
		"body": "\nRoute::controller('${1:users}', '${2:UserController}');\n",
		"description": "Route a controller to a URI with wildcard routing.",
		"scope": "source.php"
	},
	"Route::controllerAction": {
		"prefix": "Route::controllerAction",
		"body": "\nRoute::${1:get}('${2:users/{id}}', '${3:$$UserController@profile}');\n",
		"description": "Basic route to a controller action.",
		"scope": "source.php"
	},
	"Route::currentRouteAction": {
		"prefix": "Route::currentRouteAction",
		"body": "\nRoute::currentRouteAction();\n",
		"description": "Get the current route name.",
		"scope": "source.php"
	},
	"Route::delete": {
		"prefix": "Route::delete",
		"body": "\r\nRoute::delete('${1:users/{id}}', function(${2:$$id}) {\r\n    ${3://}\r\n});\r\n",
		"description": "Basic Delete Route.",
		"scope": "source.php"
	},
	"Route::get": {
		"prefix": "Route::get",
		"body": "\r\nRoute::get('${1:users/{id}}', function(${2:$$id}) {\r\n    ${3://}\r\n});\r\n",
		"description": "Basic Get Route.",
		"scope": "source.php"
	},
	"Route::group": {
		"prefix": "Route::group",
		"body": "\nRoute::group(${1:['${2:prefix}' => '${3:admin}']}, function() {\n    ${4://}\n});\n",
		"description": "Create a Group of Routes",
		"scope": "source.php"
	},
	"Route::match": {
		"prefix": "Route::match",
		"body": "\nRoute::match([${1:'get', 'post'}], '${2:/user/profile}', function() {\n    ${3://}\n});\n",
		"description": "Register a new route with the given verbs.",
		"scope": "source.php"
	},
	"Route::put": {
		"prefix": "Route::put",
		"body": "\nRoute::put('${1:users/{id}}', function(${2:$$id}) {\n    ${3://}\n});\n",
		"description": "Basic Put Route.",
		"scope": "source.php"
	},
	"Route::resource": {
		"prefix": "Route::resource",
		"body": "\nRoute::resource('${1:user}', '${2:UserController}');\n",
		"description": "Route to a RESTful Controller",
		"scope": "source.php"
	},
	"Route::when": {
		"prefix": "Route::when",
		"body": "\n\\$router->when('${1:admin/*}', '${2:admin}', ${3:['post']});\n",
		"description": "Pattern based filters on routes",
		"scope": "source.php"
	},
	"Router::model": {
		"prefix": "Router::model",
		"body": "\n\\$router->model('${1:user}', '${2:App\\User}');\n",
		"description": "Register a model binder for a wildcard.",
		"scope": "source.php"
	},
	"Router::pattern": {
		"prefix": "Router::pattern",
		"body": "\n\\$router->pattern('${1:id}', '${2:[0-9]+}');\n",
		"description": "Set a global where pattern on all routes.",
		"scope": "source.php"
	},
	"Route::post": {
		"prefix": "Route::post",
		"body": "\r\nRoute::post('${1:users/{id}}', function(${2:$$id}) {\r\n    ${3://}\r\n});\r\n",
		"description": "Basic Post Route.",
		"scope": "source.php"
	},
	"Schema::connection": {
		"prefix": "Schema::connection",
		"body": "\nSchema::connection('${1:foo}')->create('${2:users}', function(${3:$$table}) {\n    $$table->increments('${4:id}');\n});\n",
		"description": "Specify connection for schema operation",
		"scope": "source.php"
	},
	"Schema::create-table": {
		"prefix": "Schema::create-table",
		"body": "\nSchema::create('${1:users}', function (Blueprint $$table) {\n    $$table->increments('${3:id}');\n    ${2://}\n});\n",
		"description": "Create new table",
		"scope": "source.php"
	},
	"Schema::drop": {
		"prefix": "Schema::drop",
		"body": "\nSchema::drop('${1:table}');\n",
		"description": "Drop an existing database table",
		"scope": "source.php"
	},
	"Schema::dropIfExists": {
		"prefix": "Schema::dropIfExists",
		"body": "\nSchema::dropIfExists('${1:table}');\n",
		"description": "Drop an existing database table if it exists",
		"scope": "source.php"
	},
	"Schema::hasColumn": {
		"prefix": "Schema::hasColumn",
		"body": "\nif (Schema::hasColumn('${1:table}', '${2:column}')) {\n    ${3://}\n}\n",
		"description": "Check for existence of column(s)",
		"scope": "source.php"
	},
	"Schema::hasTable": {
		"prefix": "Schema::hasTable",
		"body": "\nif (Schema::hasTable('${1:table}')) {\n    ${2://}\n}\n",
		"description": "Check for existence of table",
		"scope": "source.php"
	},
	"Schema::rename-table": {
		"prefix": "Schema::rename-table",
		"body": "\nSchema::rename(${1:$$from}, ${2:$$to});\n",
		"description": "Rename an existing database table",
		"scope": "source.php"
	},
	"Schema::table-update": {
		"prefix": "Schema::table-update",
		"body": "\nSchema::table('${1:users}', function($table) {\n    ${3://}\n});\n",
		"description": "Update an existing table",
		"scope": "source.php"
	},
	"Session::all": {
		"prefix": "Session::all",
		"body": "\n\\$request->session()->all();\n",
		"description": "Retrieve All Data from the Session",
		"scope": "source.php"
	},
	"Session::flash": {
		"prefix": "Session::flash",
		"body": "\n\\$request->session()->flash('${1:key}', ${2:$$value});\n",
		"description": "Flash an Item in the Session",
		"scope": "source.php"
	},
	"Session::flush": {
		"prefix": "Session::flush",
		"body": "\n\\$request->session()->flush();\n",
		"description": "Remove All Items from the Session",
		"scope": "source.php"
	},
	"Session::forget": {
		"prefix": "Session::forget",
		"body": "\n\\$request->session()->forget('${1:key}');\n",
		"description": "Remove an Item from the Session",
		"scope": "source.php"
	},
	"Session::get": {
		"prefix": "Session::get",
		"body": "\n\\$request->session()->get('${1:key}', '${2:default}');\n",
		"description": "Retrieve an Item from the Session or Default Value",
		"scope": "source.php"
	},
	"Session::has": {
		"prefix": "Session::has",
		"body": "\n\\$request->session()->has('${1:key}');\n",
		"description": "Determin if an Item Exists in the Session",
		"scope": "source.php"
	},
	"Session::keep": {
		"prefix": "Session::keep",
		"body": "\n\\$request->session()->keep(${1:['key', 'otherkey']});\n",
		"description": "Reflash Only a Subset of Flash Data",
		"scope": "source.php"
	},
	"Session::push": {
		"prefix": "Session::push",
		"body": "\n\\$request->session()->push('${1:key.subArray}', '${2:value}');\n",
		"description": "Push a Value onto an Array Session Value",
		"scope": "source.php"
	},
	"Session::put": {
		"prefix": "Session::put",
		"body": "\n\\$request->session()->put('${1:key}', ${2:$$value});\n",
		"description": "Store an Item in the Session",
		"scope": "source.php"
	},
	"Session::reflash": {
		"prefix": "Session::reflash",
		"body": "\n\\$request->session()->reflash();\n",
		"description": "Reflash the Current Flash Data",
		"scope": "source.php"
	},
	"Session::regenerate": {
		"prefix": "Session::regenerate",
		"body": "\n\\$request->session()->regenerate();\n",
		"description": "Regenerate the Session ID",
		"scope": "source.php"
	},
	"Storage::allDirectories": {
		"prefix": "Storage::allDirectories",
		"body": "\nStorage::allDirectories(${1:directory});\n",
		"description": "Returns an array of all the directories within a given directory and all of its sub-directories",
		"scope": "source.php"
	},
	"Storage::allFiles": {
		"prefix": "Storage::allFiles",
		"body": "\nStorage::allFiles(${1:directory});\n",
		"description": "Get all of the files from the given directory (recursive)",
		"scope": "source.php"
	},
	"Storage::append": {
		"prefix": "Storage::append",
		"body": "\nStorage::append(${1:filePath}, ${2:Appended Text});\n",
		"description": "Insert content at the end of a file",
		"scope": "source.php"
	},
	"Storage::cleanDirectory": {
		"prefix": "Storage::cleanDirectory",
		"body": "\nStorage::cleanDirectory(${1:directory});\n",
		"description": "Empty the specified directory of all files and folders.",
		"scope": "source.php"
	},
	"Storage::copy": {
		"prefix": "Storage::copy",
		"body": "\nStorage::copy(${1:path}, ${2:target});\n",
		"description": "Copy an existing file to another location on the disk",
		"scope": "source.php"
	},
	"Storage::delete": {
		"prefix": "Storage::delete",
		"body": "\nStorage::delete(${1:['file', 'otherFile']});\n",
		"description": "Remove one or multiple files from the disk",
		"scope": "source.php"
	},
	"Storage::deleteDirectory": {
		"prefix": "Storage::deleteDirectory",
		"body": "\nStorage::deleteDirectory(${1:directory});\n",
		"description": "May be used to remove a directory, including all of its files, from the disk",
		"scope": "source.php"
	},
	"Storage::directories": {
		"prefix": "Storage::directories",
		"body": "\nStorage::directories(${1:directory});\n",
		"description": "Returns an array of all the directories within a given directory",
		"scope": "source.php"
	},
	"Storage::exists": {
		"prefix": "Storage::exists",
		"body": "\nStorage::exists(${1:filePath});\n",
		"description": "Determine if a file exists.",
		"scope": "source.php"
	},
	"Storage::extension": {
		"prefix": "Storage::extension",
		"body": "\nStorage::extension(${1:filePath});\n",
		"description": "Extract the file extension from a file path.",
		"scope": "source.php"
	},
	"Storage::files": {
		"prefix": "Storage::files",
		"body": "\nStorage::files(${1:directory});\n",
		"description": "Returns an array of all of the files in a directory",
		"scope": "source.php"
	},
	"Storage::get": {
		"prefix": "Storage::get",
		"body": "\nStorage::get(${1:filePath});\n",
		"description": "Retrieve the contents of a given file",
		"scope": "source.php"
	},
	"Storage::isDirectory": {
		"prefix": "Storage::isDirectory",
		"body": "\nStorage::isDirectory(${1:directory});\n",
		"description": "Determine if the given path is a directory.",
		"scope": "source.php"
	},
	"Storage::isFile": {
		"prefix": "Storage::isFile",
		"body": "\nStorage::isFile(${1:path});\n",
		"description": "Determine if the given path is a directory.",
		"scope": "source.php"
	},
	"Storage::iswritable": {
		"prefix": "Storage::iswritable",
		"body": "\nStorage::isWritable(${1:path});\n",
		"description": "Determine if the given path is writable.",
		"scope": "source.php"
	},
	"Storage::lastModified": {
		"prefix": "Storage::lastModified",
		"body": "\nStorage::lastModified(${1:filePath});\n",
		"description": "Returns the UNIX timestamp of the last time the file was modified",
		"scope": "source.php"
	},
	"Storage::makeDirectory": {
		"prefix": "Storage::makeDirectory",
		"body": "\nStorage::makeDirectory(${1:directory});\n",
		"description": "Will create the given directory, including any needed sub-directories",
		"scope": "source.php"
	},
	"Storage::mimeType": {
		"prefix": "Storage::mimeType",
		"body": "\nStorage::mimeType(${1:path});\n",
		"description": "Get the mime-type of a given file.",
		"scope": "source.php"
	},
	"Storage::move": {
		"prefix": "Storage::move",
		"body": "\nStorage::move(${1:path}, ${2:target});\n",
		"description": "Move an existing file to a new location on the disk",
		"scope": "source.php"
	},
	"Storage::name": {
		"prefix": "Storage::name",
		"body": "\nStorage::name(${1:filePath});\n",
		"description": "Extract the file name from a file path.",
		"scope": "source.php"
	},
	"Storage::prepend": {
		"prefix": "Storage::prepend",
		"body": "\nStorage::prepend(${1:filePath}, ${2:Prepended Text});\n",
		"description": "Insert content at the beginning of a file",
		"scope": "source.php"
	},
	"Storage::put": {
		"prefix": "Storage::put",
		"body": "\nStorage::put(${1:filePath}, ${2:$$contents});\n",
		"description": "Store a file on disk",
		"scope": "source.php"
	},
	"Storage::size": {
		"prefix": "Storage::size",
		"body": "\nStorage::size(${1:filePath});\n",
		"description": "Get the size of the file in bytes",
		"scope": "source.php"
	},
	"Storage::type": {
		"prefix": "Storage::type",
		"body": "\nStorage::type(${1:filePath});\n",
		"description": "Get the file type of a given file.",
		"scope": "source.php"
	},
	"Column::bigIncrements": {
		"prefix": "Column::bigIncrements",
		"body": "\n\\$table->bigIncrements('${1:id}');\n",
		"description": "Incrementing ID using a \"big integer\" equivalent.",
		"scope": "source.php"
	},
	"Column::bigInteger": {
		"prefix": "Column::bigInteger",
		"body": "\n\\$table->bigInteger('${1:votes}')${2:->nullable()}${3:->default(${4:12})};\n",
		"description": "BIGINT equivalent to the table",
		"scope": "source.php"
	},
	"Column::binary": {
		"prefix": "Column::binary",
		"body": "\n\\$table->binary('${1:data}')${2:->nullable()}${3:->default(${4:12})};\n",
		"description": "BLOB equivalent to the table",
		"scope": "source.php"
	},
	"Column::boolean": {
		"prefix": "Column::boolean",
		"body": "\n\\$table->boolean('${1:confirmed}')${2:->nullable()}${3:->default(${4:false})};\n",
		"description": "BOOLEAN equivalent to the table",
		"scope": "source.php"
	},
	"Column::char": {
		"prefix": "Column::char",
		"body": "\n\\$table->char('${1:name}', ${2:4})${2:->nullable()}${3:->default(${4:'text'})};\n",
		"description": "CHAR equivalent with a length (optional)",
		"scope": "source.php"
	},
	"Column::date": {
		"prefix": "Column::date",
		"body": "\n\\$table->date('${1:created_at}')${2:->nullable()}${3:->default(${4:new DateTime()})};\n",
		"description": "DATE equivalent to the table",
		"scope": "source.php"
	},
	"Column::dateTime": {
		"prefix": "Column::dateTime",
		"body": "\n\\$table->dateTime('${1:created_at}')${2:->nullable()}${3:->default(${4:new DateTime()})};\n",
		"description": "DATETIME equivalent to the table",
		"scope": "source.php"
	},
	"Column::decimal": {
		"prefix": "Column::decimal",
		"body": "\n\\$table->double('${1:amount}', ${2:5}, ${3:2})${4:->nullable()}${5:->default(${6:123.45})};\n",
		"description": "DECIMAL equivalent with a precision and scale",
		"scope": "source.php"
	},
	"Column::double": {
		"prefix": "Column::double",
		"body": "\n\\$table->double('${1:column}', ${2:15}, ${3:8})${4:->nullable()}${5:->default(${6:123.4567})};;\n",
		"description": "DOUBLE equivalent with precision",
		"scope": "source.php"
	},
	"Column::dropColumn": {
		"prefix": "Column::dropColumn",
		"body": "\n\\$table->dropColumn('${1:column}');\n",
		"description": "Drop a column",
		"scope": "source.php"
	},
	"Column::dropForeign": {
		"prefix": "Column::dropForeign",
		"body": "\n\\$table->dropForeign('${1:posts_user_id_foreign}');\n",
		"description": "Drop a Foreign Key",
		"scope": "source.php"
	},
	"Column::dropIndex": {
		"prefix": "Column::dropIndex",
		"body": "\n\\$table->dropIndex('${1:geo_state_index}');\n",
		"description": "Drop a basic Index",
		"scope": "source.php"
	},
	"Column::dropPrimary": {
		"prefix": "Column::dropPrimary",
		"body": "\n\\$table->dropPrimary('${1:users_id_primary}');\n",
		"description": "Drop a Primary key",
		"scope": "source.php"
	},
	"Column::dropUnique": {
		"prefix": "Column::dropUnique",
		"body": "\n\\$table->dropUnique('${1:users_email_unique}')\n",
		"description": "Drop a Unique Index",
		"scope": "source.php"
	},
	"Column::engine": {
		"prefix": "Column::engine",
		"body": "\n\\$table->engine = '${1:InnoDB}';\n",
		"description": "Set the storage engine for a table",
		"scope": "source.php"
	},
	"Column::enum": {
		"prefix": "Column::enum",
		"body": "\n\\$table->enum('${1:choices}', ${2:['foo', 'bar']})${3:->nullable()}${4:->default(${5:['foo', 'bar']})};;\n",
		"description": "ENUM equivalent to the table",
		"scope": "source.php"
	},
	"Column::float": {
		"prefix": "Column::float",
		"body": "\n\\$table->float('${1:amount}')${2:->nullable()}${3:->default(${4:123.45})};\n",
		"description": "FLOAT equivalent to the table",
		"scope": "source.php"
	},
	"Column::increments": {
		"prefix": "Column::increments",
		"body": "\n\\$table->increments('${1:id}');\n",
		"description": "Incrementing ID",
		"scope": "source.php"
	},
	"Column::index-foreign": {
		"prefix": "Column::index-foreign",
		"body": "\n\\$table->foreign('${1:user_id}')->references('${2:id}')->on('${3:users}')${4:->onDelete('${5:cascade}')};\n",
		"description": "Add a Foreign Key to a table",
		"scope": "source.php"
	},
	"Column::index": {
		"prefix": "Column::index",
		"body": "\n\\$table->index('${1:column}');\n",
		"description": "Adding a basic index",
		"scope": "source.php"
	},
	"Column::index-primary": {
		"prefix": "Column::index-primary",
		"body": "\n\\$table->primary('${1:id}');\n",
		"description": "Add a primary or array of composite keys",
		"scope": "source.php"
	},
	"Column::index-unique": {
		"prefix": "Column::index-unique",
		"body": "\n\\$table->unique('${1:column}');\n",
		"description": "Add a unique index",
		"scope": "source.php"
	},
	"Column::integer": {
		"prefix": "Column::integer",
		"body": "\n\\$table->integer('${1:votes}')${2:->unsigned()}${3:->nullable()}${4:->default(${5:12})};\n",
		"description": "INTEGER equivalent to the table",
		"scope": "source.php"
	},
	"Column::json": {
		"prefix": "Column::json",
		"body": "\n\\$table->json('${1:column}')${2:->nullable()};\n",
		"description": "JSON equivalent to the table",
		"scope": "source.php"
	},
	"Column::jsonb": {
		"prefix": "Column::jsonb",
		"body": "\n\\$table->jsonb('${1:column}')${2:->nullable()};\n",
		"description": "JSON equivalent to the table",
		"scope": "source.php"
	},
	"Column::longText": {
		"prefix": "Column::longText",
		"body": "\n\\$table->longText('${1:description}')${2:->nullable()}${3:->default(${4:'text'})};\n",
		"description": "LONGTEXT equivalent to the table",
		"scope": "source.php"
	},
	"Column::mediumText": {
		"prefix": "Column::mediumText",
		"body": "\n\\$table->mediumText('${1:mediumText}')${2:->nullable()}${3:->default(${4:'text'})};\n",
		"description": "MEDIUMTEXT equivalent to the table",
		"scope": "source.php"
	},
	"Column::morphs": {
		"prefix": "Column::morphs",
		"body": "\n\\$table->morphs('${1:taggable}');\n",
		"description": "Adds INTEGER taggable_id and STRING taggable_type",
		"scope": "source.php"
	},
	"Column::rememberToken": {
		"prefix": "Column::rememberToken",
		"body": "\n\\$table->rememberToken();\n",
		"description": "Adds remember_token as VARCHAR(100) NULL",
		"scope": "source.php"
	},
	"Column::renameColumn": {
		"prefix": "Column::renameColumn",
		"body": "\n\\$table->renameColumn('${1:from}', '${2:to}');\n",
		"description": "Rename a column",
		"scope": "source.php"
	},
	"Column::smallInteger": {
		"prefix": "Column::smallInteger",
		"body": "\n\\$table->smallInteger('${1:votes}')${2:->nullable()}${3:->default(${4:12})};\n",
		"description": "SMALLINT equivalent to the table",
		"scope": "source.php"
	},
	"Column::softDeletes": {
		"prefix": "Column::softDeletes",
		"body": "\n\\$table->softDeletes();\n",
		"description": "Adds deleted_at column for soft deletes",
		"scope": "source.php"
	},
	"Column::string": {
		"prefix": "Column::string",
		"body": "\n\\$table->string('${1:name}', ${2:100})${3:->nullable()}${5:->default(${6:'text'})};\n",
		"description": "VARCHAR equivalent with a length (optional)",
		"scope": "source.php"
	},
	"Column::text": {
		"prefix": "Column::text",
		"body": "\n\\$table->text('${1:description}')${2:->nullable()}${3:->default(${4:'text'})};\n",
		"description": "TEXT equivalent to the table",
		"scope": "source.php"
	},
	"Column::time": {
		"prefix": "Column::time",
		"body": "\n\\$table->time('${1:sunrise}')${2:->nullable()}${3:->default(${4:new DateTime()})};\n",
		"description": "TIME equivalent to the table",
		"scope": "source.php"
	},
	"Column::timestamp": {
		"prefix": "Column::timestamp",
		"body": "\n\\$table->timestamp('${1:added_on}')${2:->nullable()}${3:->default(${4:time()})};\n",
		"description": "TIMESTAMP equivalent to the table",
		"scope": "source.php"
	},
	"Column::timestamps": {
		"prefix": "Column::timestamps",
		"body": "\n\\$table->timestamps();\n",
		"description": "Adds created_at and updated_at columns",
		"scope": "source.php"
	},
	"Column::tinyInteger": {
		"prefix": "Column::tinyInteger",
		"body": "\n\\$table->tinyInteger('${1:numbers}');\n",
		"description": "TINYINT equivalent to the table",
		"scope": "source.php"
	},
	"Column::uuid": {
		"prefix": "Column::uuid",
		"body": "\n\\$table->uuid('${1:id}')${2:->nullable()}${3:->default(${4:null})};\n",
		"description": "UUID equivalent to the table",
		"scope": "source.php"
	},
	"View::composer": {
		"prefix": "View::composer",
		"body": "\nview()->composer('${1:name}', function(${2:$$view}) {\n    ${3://}\n});\n",
		"description": "Define a View Composer",
		"scope": "source.php"
	},
	"View::composerClass": {
		"prefix": "View::composerClass",
		"body": "\nview()->composer('${1:name}', '${2:App\\Http\\ViewComposers\\SomeComposer}');\n",
		"description": "Define a Class-based View Composer",
		"scope": "source.php"
	},
	"View::exists": {
		"prefix": "View::exists",
		"body": "\nif (view()->exists('${1:view.name}'))\n{\n\t${2://}\n}\n",
		"description": "Determine if a view exists",
		"scope": "source.php"
	},
	"View::make": {
		"prefix": "View::make",
		"body": "\nview('${1:view.name}', ${2:$$data});\n",
		"description": "Create a View with Data",
		"scope": "source.php"
	},
	"View::makeCompact": {
		"prefix": "View::makeCompact",
		"body": "\nview('${1:view.name}', compact(${2:$$data}));\n",
		"description": "Create a View, Pass Data with compact()",
		"scope": "source.php"
	},
	"View::makeWith": {
		"prefix": "View::makeWith",
		"body": "\nview(${1:'view.name'})->with('${2:key}', ${3:$$value});\n",
		"description": "Create a View, Pass Data using with()",
		"scope": "source.php"
	},
	"View::render": {
		"prefix": "View::render",
		"body": "\nview(${1:'name'}, ${2:$$data})->render();\n",
		"description": "Render a view with some data",
		"scope": "source.php"
	},
	"View::share": {
		"prefix": "View::share",
		"body": "\nview()->share('${1:key}', ${2:$$value});\n",
		"description": "Share Data across all Views",
		"scope": "source.php"
	},
	"Validator::extend": {
		"prefix": "Validator::extend",
		"body": "\nValidator::extend(${1:$$rule}, ${2:$$extension}, ${3:$$message});\n",
		"description": "Register a custom validator extension.\n@param  string  $rule\n@param  \\Closure|string  $extension\n@param  string  $message",
		"scope": "source.php"
	},
	"Validator::make": {
		"prefix": "Validator::make",
		"body": "\nValidator::make(${1:$$data}, ${2:$$rules}, ${3:$$messages});\n",
		"description": "Create a new Validator instance.\n@param  array  $data\n@param  array  $rules\n@param  array  $messages",
		"scope": "source.php"
	},
	"Validator::resolver": {
		"prefix": "Validator::resolver",
		"body": "\nValidator::resolver(function($$translator, $$data, $$rules,$$msgs){\nreturn new ${1:FooValidator}($$translator, $$data, $$rules, $$msgs);\n});\n",
		"description": "Resolve a new Validator instance.",
		"scope": "source.php"
	}
}