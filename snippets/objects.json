{
  "request.all": {
    "prefix": "request.all",
    "body": "\n\\$request->all();\n",
    "description": "Retrieve all Inputs",
    "scope": "source.php"
  },
  "request.except": {
    "prefix": "request.except",
    "body": "\n\\$request->except(${1:['key', 'otherKey']});\n",
    "description": "Retrieve only some of the Request Input",
    "scope": "source.php"
  },
  "request.exists": {
    "prefix": "request.exists",
    "body": "\n\\$request->exists('${1:key}')\n",
    "description": "Determine if the request contains a given input item key.",
    "scope": "source.php"
  },
  "request.file": {
    "prefix": "request.file",
    "body": "\n\\$request->file('${1:key}');\n",
    "description": "Retrieve Uploaded File",
    "scope": "source.php"
  },
  "request.fileMove": {
    "prefix": "request.fileMove",
    "body": "\n\\$request->file('${1:key}')->move(${2:$$destinationPath}, ${3:$$fileName});\n",
    "description": "Move an Uploaded File",
    "scope": "source.php"
  },
  "request.flash": {
    "prefix": "request.flash",
    "body": "\n\\$request->flash();\n",
    "description": "Flash Input to the Session",
    "scope": "source.php"
  },
  "request.flashExcept": {
    "prefix": "request.flashExcept",
    "body": "\n\\$request->flashExcept(${1:['key', 'otherKey']});\n",
    "description": "Flash only some Input to the Session",
    "scope": "source.php"
  },
  "request.flashOnly": {
    "prefix": "request.flashOnly",
    "body": "\n\\$request->flashOnly('${1:['key', 'otherKey']}');\n",
    "description": "Flash only some Input to the Session",
    "scope": "source.php"
  },
  "request.input": {
    "prefix": "request.input",
    "body": "\n\\$request->input('${1:key}');\n",
    "description": "Retrieve an Input value",
    "scope": "source.php"
  },
  "request.getWithDefault": {
    "prefix": "request.getWithDefault",
    "body": "\n\\$request->input('${1:key}', ${2:'default'});\n",
    "description": "Retrieve an Input value with Default",
    "scope": "source.php"
  },
  "request.has": {
    "prefix": "request.has",
    "body": "\n\\$request->has('${1:key}')\n",
    "description": "Determine if the request contains a non-empty value for an input item.",
    "scope": "source.php"
  },
  "request.hasFile": {
    "prefix": "request.hasFile",
    "body": "\n\\$request->hasFile('${1:key}');\n",
    "description": "Determine if File was Uploaded",
    "scope": "source.php"
  },
  "request.old": {
    "prefix": "request.old",
    "body": "\n\\$request->old('${1:key}');\n",
    "description": "Retrieve Old Data",
    "scope": "source.php"
  },
  "request.oldWithDefault": {
    "prefix": "request.oldWithDefault",
    "body": "\n\\$request->old('${1:key}', ${2:'default'});\n",
    "description": "Retrieve Old Data with Default",
    "scope": "source.php"
  },
  "request.only": {
    "prefix": "request.only",
    "body": "\n\\$request->only(${1:['key', 'otherKey']});\n",
    "description": "Retrieve only some of the Request Input",
    "scope": "source.php"
  },
  "table.bigIncrements": {
    "prefix": "table.bigIncrements",
    "body": "\n\\$table->bigIncrements('${1:id}');\n",
    "description": "Incrementing ID using a \"big integer\" equivalent.",
    "scope": "source.php"
  },
  "table.bigInteger": {
    "prefix": "table.bigInteger",
    "body": "\n\\$table->bigInteger('${1:votes}')${2:->nullable()}${3:->default(${4:12})};\n",
    "description": "BIGINT equivalent to the table",
    "scope": "source.php"
  },
  "table.binary": {
    "prefix": "table.binary",
    "body": "\n\\$table->binary('${1:data}')${2:->nullable()}${3:->default(${4:12})};\n",
    "description": "BLOB equivalent to the table",
    "scope": "source.php"
  },
  "table.boolean": {
    "prefix": "table.boolean",
    "body": "\n\\$table->boolean('${1:confirmed}')${2:->nullable()}${3:->default(${4:false})};\n",
    "description": "BOOLEAN equivalent to the table",
    "scope": "source.php"
  },
  "table.char": {
    "prefix": "table.char",
    "body": "\n\\$table->char('${1:name}', ${2:4})${2:->nullable()}${3:->default(${4:'text'})};\n",
    "description": "CHAR equivalent with a length (optional)",
    "scope": "source.php"
  },
  "table.date": {
    "prefix": "table.date",
    "body": "\n\\$table->date('${1:created_at}')${2:->nullable()}${3:->default(${4:new DateTime()})};\n",
    "description": "DATE equivalent to the table",
    "scope": "source.php"
  },
  "table.dateTime": {
    "prefix": "table.dateTime",
    "body": "\n\\$table->dateTime('${1:created_at}')${2:->nullable()}${3:->default(${4:new DateTime()})};\n",
    "description": "DATETIME equivalent to the table",
    "scope": "source.php"
  },
  "table.decimal": {
    "prefix": "table.decimal",
    "body": "\n\\$table->double('${1:amount}', ${2:5}, ${3:2})${4:->nullable()}${5:->default(${6:123.45})};\n",
    "description": "DECIMAL equivalent with a precision and scale",
    "scope": "source.php"
  },
  "table.double": {
    "prefix": "table.double",
    "body": "\n\\$table->double('${1:column}', ${2:15}, ${3:8})${4:->nullable()}${5:->default(${6:123.4567})};;\n",
    "description": "DOUBLE equivalent with precision",
    "scope": "source.php"
  },
  "table.dropColumn": {
    "prefix": "table.dropColumn",
    "body": "\n\\$table->dropColumn('${1:column}');\n",
    "description": "Drop a column",
    "scope": "source.php"
  },
  "table.dropForeign": {
    "prefix": "table.dropForeign",
    "body": "\n\\$table->dropForeign('${1:posts_user_id_foreign}');\n",
    "description": "Drop a Foreign Key",
    "scope": "source.php"
  },
  "table.dropIndex": {
    "prefix": "table.dropIndex",
    "body": "\n\\$table->dropIndex('${1:geo_state_index}');\n",
    "description": "Drop a basic Index",
    "scope": "source.php"
  },
  "table.dropPrimary": {
    "prefix": "table.dropPrimary",
    "body": "\n\\$table->dropPrimary('${1:users_id_primary}');\n",
    "description": "Drop a Primary key",
    "scope": "source.php"
  },
  "table.dropUnique": {
    "prefix": "table.dropUnique",
    "body": "\n\\$table->dropUnique('${1:users_email_unique}')\n",
    "description": "Drop a Unique Index",
    "scope": "source.php"
  },
  "table.engine": {
    "prefix": "table.engine",
    "body": "\n\\$table->engine = '${1:InnoDB}';\n",
    "description": "Set the storage engine for a table",
    "scope": "source.php"
  },
  "table.enum": {
    "prefix": "table.enum",
    "body": "\n\\$table->enum('${1:choices}', ${2:['foo', 'bar']})${3:->nullable()}${4:->default(${5:['foo', 'bar']})};;\n",
    "description": "ENUM equivalent to the table",
    "scope": "source.php"
  },
  "table.float": {
    "prefix": "table.float",
    "body": "\n\\$table->float('${1:amount}')${2:->nullable()}${3:->default(${4:123.45})};\n",
    "description": "FLOAT equivalent to the table",
    "scope": "source.php"
  },
  "table.increments": {
    "prefix": "table.increments",
    "body": "\n\\$table->increments('${1:id}');\n",
    "description": "Incrementing ID",
    "scope": "source.php"
  },
  "table.index-foreign": {
    "prefix": "table.index-foreign",
    "body": "\n\\$table->foreign('${1:user_id}')->references('${2:id}')->on('${3:users}')${4:->onDelete('${5:cascade}')};\n",
    "description": "Add a Foreign Key to a table",
    "scope": "source.php"
  },
  "table.index": {
    "prefix": "table.index",
    "body": "\n\\$table->index('${1:column}');\n",
    "description": "Adding a basic index",
    "scope": "source.php"
  },
  "table.index-primary": {
    "prefix": "table.index-primary",
    "body": "\n\\$table->primary('${1:id}');\n",
    "description": "Add a primary or array of composite keys",
    "scope": "source.php"
  },
  "table.index-unique": {
    "prefix": "table.index-unique",
    "body": "\n\\$table->unique('${1:column}');\n",
    "description": "Add a unique index",
    "scope": "source.php"
  },
  "table.integer": {
    "prefix": "table.integer",
    "body": "\n\\$table->integer('${1:votes}')${2:->unsigned()}${3:->nullable()}${4:->default(${5:12})};\n",
    "description": "INTEGER equivalent to the table",
    "scope": "source.php"
  },
  "table.json": {
    "prefix": "table.json",
    "body": "\n\\$table->json('${1:column}')${2:->nullable()};\n",
    "description": "JSON equivalent to the table",
    "scope": "source.php"
  },
  "table.jsonb": {
    "prefix": "table.jsonb",
    "body": "\n\\$table->jsonb('${1:column}')${2:->nullable()};\n",
    "description": "JSON equivalent to the table",
    "scope": "source.php"
  },
  "table.longText": {
    "prefix": "table.longText",
    "body": "\n\\$table->longText('${1:description}')${2:->nullable()}${3:->default(${4:'text'})};\n",
    "description": "LONGTEXT equivalent to the table",
    "scope": "source.php"
  },
  "table.mediumText": {
    "prefix": "table.mediumText",
    "body": "\n\\$table->mediumText('${1:mediumText}')${2:->nullable()}${3:->default(${4:'text'})};\n",
    "description": "MEDIUMTEXT equivalent to the table",
    "scope": "source.php"
  },
  "table.morphs": {
    "prefix": "table.morphs",
    "body": "\n\\$table->morphs('${1:taggable}');\n",
    "description": "Adds INTEGER taggable_id and STRING taggable_type",
    "scope": "source.php"
  },
  "table.rememberToken": {
    "prefix": "table.rememberToken",
    "body": "\n\\$table->rememberToken();\n",
    "description": "Adds remember_token as VARCHAR(100) NULL",
    "scope": "source.php"
  },
  "table.renameColumn": {
    "prefix": "table.renameColumn",
    "body": "\n\\$table->renameColumn('${1:from}', '${2:to}');\n",
    "description": "Rename a column",
    "scope": "source.php"
  },
  "table.smallInteger": {
    "prefix": "table.smallInteger",
    "body": "\n\\$table->smallInteger('${1:votes}')${2:->nullable()}${3:->default(${4:12})};\n",
    "description": "SMALLINT equivalent to the table",
    "scope": "source.php"
  },
  "table.softDeletes": {
    "prefix": "table.softDeletes",
    "body": "\n\\$table->softDeletes();\n",
    "description": "Adds deleted_at column for soft deletes",
    "scope": "source.php"
  },
  "table.string": {
    "prefix": "table.string",
    "body": "\n\\$table->string('${1:name}', ${2:100})${3:->nullable()}${5:->default(${6:'text'})};\n",
    "description": "VARCHAR equivalent with a length (optional)",
    "scope": "source.php"
  },
  "table.text": {
    "prefix": "table.text",
    "body": "\n\\$table->text('${1:description}')${2:->nullable()}${3:->default(${4:'text'})};\n",
    "description": "TEXT equivalent to the table",
    "scope": "source.php"
  },
  "table.time": {
    "prefix": "table.time",
    "body": "\n\\$table->time('${1:sunrise}')${2:->nullable()}${3:->default(${4:new DateTime()})};\n",
    "description": "TIME equivalent to the table",
    "scope": "source.php"
  },
  "table.timestamp": {
    "prefix": "table.timestamp",
    "body": "\n\\$table->timestamp('${1:added_on}')${2:->nullable()}${3:->default(${4:time()})};\n",
    "description": "TIMESTAMP equivalent to the table",
    "scope": "source.php"
  },
  "table.timestamps": {
    "prefix": "table.timestamps",
    "body": "\n\\$table->timestamps();\n",
    "description": "Adds created_at and updated_at columns",
    "scope": "source.php"
  },
  "table.tinyInteger": {
    "prefix": "table.tinyInteger",
    "body": "\n\\$table->tinyInteger('${1:numbers}');\n",
    "description": "TINYINT equivalent to the table",
    "scope": "source.php"
  },
  "table.uuid": {
    "prefix": "table.uuid",
    "body": "\n\\$table->uuid('${1:id}')${2:->nullable()}${3:->default(${4:null})};\n",
    "description": "UUID equivalent to the table",
    "scope": "source.php"
  },
  "helpers.array_add": {
    "prefix": "helpers.array_add",
    "body": "\narray_add(${1:$$array}, ${2:'key'}, ${3:'value'});\n",
    "description": "Add an element to an array using \"dot\" notation if it doesn't exist.",
    "scope": "source.php"
  },
  "helpers.array_collapse": {
    "prefix": "helpers.array_collapse",
    "body": "\narray_collapse(${1:$$array});\n",
    "description": "Collapse an array of arrays into a single array.",
    "scope": "source.php"
  },
  "helpers.data_get": {
    "prefix": "helpers.data_get",
    "body": "\ndata_get(${1:$$array}, ${2:'names.john'}, ${3:'default'});\n",
    "description": "Get an item from an array using \"dot\" notation.",
    "scope": "source.php"
  },
  "helpers.array_divide": {
    "prefix": "helpers.array_divide",
    "body": "\nlist(${1:$$keys}, ${2:$$values}) = array_divide(${3:$$array});\n",
    "description": "Divide an array into two arrays. One with keys and the other with values.",
    "scope": "source.php"
  },
  "helpers.array_dot": {
    "prefix": "helpers.array_dot",
    "body": "\narray_dot(${1:$$array});\n",
    "description": "Flatten a multi-dimensional associative array with dots.",
    "scope": "source.php"
  },
  "helpers.last": {
    "prefix": "helpers.last",
    "body": "\nlast(${1:$$array);\n",
    "description": "Get the last element of an array. Useful for method chaining.",
    "scope": "source.php"
  },
  "helpers.array_except": {
    "prefix": "helpers.array_except",
    "body": "\narray_except(${1:$$array}, ${2:['key', 'otherKey']});\n",
    "description": "Get all of the given array except for a specified array of items.",
    "scope": "source.php"
  },
  "helpers.array_first": {
    "prefix": "helpers.array_first",
    "body": "\narray_first(${1:$$array}, function (${2:$$key}, ${3:$$value}) {\n    return ${4:$$value >= 150;}\n});\n",
    "description": "Return the first element in an array passing a given truth test.",
    "scope": "source.php"
  },
  "helpers.array_flatten": {
    "prefix": "helpers.array_flatten",
    "body": "\narray_flatten(${1:$$array});\n",
    "description": "Will flatten a multi-dimensional array into a single level.",
    "scope": "source.php"
  },
  "helpers.array_forget": {
    "prefix": "helpers.array_forget",
    "body": "\narray_forget(${1:$$array}, ${2:'names.joe'});\n",
    "description": "Remove one or many array items from a given array using \"dot\" notation.",
    "scope": "source.php"
  },
  "helpers.array_get": {
    "prefix": "helpers.array_get",
    "body": "\narray_get(${1:$$array}, ${2:'names.john'}, ${3:'default'});\n",
    "description": "Get an item from an array using \"dot\" notation.",
    "scope": "source.php"
  },
  "helpers.array_has": {
    "prefix": "helpers.array_has",
    "body": "\narray_has(${1:$$array}, ${2:key});\n",
    "description": "Check if an item exists in an array using \"dot\" notation.",
    "scope": "source.php"
  },
  "helpers.head": {
    "prefix": "helpers.head",
    "body": "\nhead(${1:$$array});\n",
    "description": "Get the first element of an array. Useful for method chaining.",
    "scope": "source.php"
  },
  "helpers.array_last": {
    "prefix": "helpers.array_last",
    "body": "\narray_last(${1:$$array}, function (${2:$$key}, ${3:$$value}) {\n    return ${4:$$value >= 150;}\n});\n",
    "description": "Return the last element in an array passing a given truth test.",
    "scope": "source.php"
  },
  "helpers.array_only": {
    "prefix": "helpers.array_only",
    "body": "\narray_only(${1:$$array}, ${2:['key', 'otherKey']});\n",
    "description": "Get a subset of the items from the given array.",
    "scope": "source.php"
  },
  "helpers.array_pluck": {
    "prefix": "helpers.array_pluck",
    "body": "\narray_pluck(${1:$$array}, ${2:'value'});\n",
    "description": "Pluck an array of values from an array.",
    "scope": "source.php"
  },
  "helpers.array_prepend": {
    "prefix": "helpers.array_prepend",
    "body": "\narray_prepend(${1:$$array}, ${2:'value'});\n",
    "description": "Push an item onto the beginning of an array.",
    "scope": "source.php"
  },
  "helpers.array_pull": {
    "prefix": "helpers.array_pull",
    "body": "\narray_pull(${1:$$array}, ${2:'value'});\n",
    "description": "Get a value from the array, and remove it.",
    "scope": "source.php"
  },
  "helpers.array_set": {
    "prefix": "helpers.array_set",
    "body": "\narray_set(${1:$$array}, ${2:'products.desk.price'}, ${3:200});\n",
    "description": "Set an array item to a given value using \"dot\" notation.",
    "scope": "source.php"
  },
  "helpers.array_sort_recursive": {
    "prefix": "helpers.array_sort_recursive",
    "body": "\narray_sort_recursive(${1:$$array});\n",
    "description": "Recursively sort an array by keys and values.",
    "scope": "source.php"
  },
  "helpers.array_sort": {
    "prefix": "helpers.array_sort",
    "body": "\narray_values(array_sort(${1:$$array}, function(${2:$$key}, ${3:$$value}) {\n    return ${3:$$value}['${4:name}'];\n}));\n",
    "description": "Sort the array using the given callback.",
    "scope": "source.php"
  },
  "helpers.array_where": {
    "prefix": "helpers.array_where",
    "body": "\narray_where(${2:$$array}, function(${3:$$key}, ${4:$$value}) {\n    return ${4:is_string($value);}\n});\n",
    "description": "Filter the array using the given callback.",
    "scope": "source.php"
  },
  "helpers.class_uses_recursive": {
    "prefix": "helpers.class_uses_recursive",
    "body": "\nclass_uses_recursive(${1:'Foo\\Bar\\Baz'});\n",
    "description": "Returns all traits used by a class, its subclasses and trait of their traits.",
    "scope": "source.php"
  },
  "helpers.collect": {
    "prefix": "helpers.collect",
    "body": "\ncollect(${1:'Foo\\Bar\\Baz'});\n",
    "description": "Create a collection from the given value.",
    "scope": "source.php"
  },
  "helpers.csrf_field": {
    "prefix": "helpers.csrf_field",
    "body": "\ncsrf_field();\n",
    "description": "Get the value of the current CSRF token.",
    "scope": "source.php"
  },
  "helpers.csrf_token": {
    "prefix": "helpers.csrf_token",
    "body": "\ncsrf_token();\n",
    "description": "Get the value of the current CSRF token.",
    "scope": "source.php"
  },
  "helpers.dd": {
    "prefix": "helpers.dd",
    "body": "\ndd(${1:$$value});\n",
    "description": "Dump the passed variables and end the script.",
    "scope": "source.php"
  },
  "helpers.object_get": {
    "prefix": "helpers.object_get",
    "body": "\nobject_get(${1:$$object, ${2:'names.john'}, ${3:'default'});\n",
    "description": "Get an item from an object using \"dot\" notation.",
    "scope": "source.php"
  },
  "helpers.trait_uses_recursive": {
    "prefix": "helpers.trait_uses_recursive",
    "body": "\ntrait_uses_recursive(${1:'Foo\\Bar\\Baz'});\n",
    "description": "Returns all traits used by a trait and its traits.",
    "scope": "source.php"
  },
  "helpers.app_path": {
    "prefix": "helpers.app_path",
    "body": "\napp_path();\n",
    "description": "Get the fully qualified path to the app directory.",
    "scope": "source.php"
  },
  "helpers.base_path": {
    "prefix": "helpers.base_path",
    "body": "\nbase_path(${1:'file'});\n",
    "description": "Get the fully qualified path to the root of the application install.",
    "scope": "source.php"
  },
  "helpers.config_path": {
    "prefix": "helpers.config_path",
    "body": "\nconfig_path();\n",
    "description": "Get the fully qualified path to the app directory.",
    "scope": "source.php"
  },
  "helpers.elixir": {
    "prefix": "helpers.elixir",
    "body": "\nelixir('${1:file}');\n",
    "description": "Get the path to the versionned Elixir file.",
    "scope": "source.php"
  },
  "helpers.public_path": {
    "prefix": "helpers.public_path",
    "body": "\npublic_path();\n",
    "description": "Get the fully qualified path to the public directory.",
    "scope": "source.php"
  },
  "helpers.storage_path": {
    "prefix": "helpers.storage_path",
    "body": "\nstorage_path(${1:'file'});\n",
    "description": "Get the fully qualified path to the app/storage directory.",
    "scope": "source.php"
  },
  "helpers.camel_case": {
    "prefix": "helpers.camel_case",
    "body": "\ncamel_case(${1:'foo_bar'});\n",
    "description": "Convert a value to camel case.",
    "scope": "source.php"
  },
  "helpers.class_basename": {
    "prefix": "helpers.class_basename",
    "body": "\nclass_basename(${1:'Foo\\Bar\\Baz'});\n",
    "description": "Get the class \"basename\" of the given object / class.",
    "scope": "source.php"
  },
  "helpers.e": {
    "prefix": "helpers.e",
    "body": "\ne(${1:'<html>foo</html>'});\n",
    "description": "Escape HTML entities in a string.",
    "scope": "source.php"
  },
  "helpers.ends_with": {
    "prefix": "helpers.ends_with",
    "body": "\nends_with(${1:'haystack'}, ${2:'needles'});\n",
    "description": "Determine if a given string ends with a given substring.",
    "scope": "source.php"
  },
  "helpers.snake_case": {
    "prefix": "helpers.snake_case",
    "body": "\nsnake_case(${1:'fooBar'});\n",
    "description": "Convert the given string to snake_case.",
    "scope": "source.php"
  },
  "helpers.starts_with": {
    "prefix": "helpers.starts_with",
    "body": "\nstarts_with(${1:'haystack'}, ${2:'needle'});\n",
    "description": "Determine if the given haystack begins with the given needle.",
    "scope": "source.php"
  },
  "helpers.str_contains": {
    "prefix": "helpers.str_contains",
    "body": "\nstr_contains(${1:'This is my name'}, ${2:'my'});\n",
    "description": "Determine if the given haystack contains the given needle.",
    "scope": "source.php"
  },
  "helpers.str_finish": {
    "prefix": "helpers.str_finish",
    "body": "\nstr_finish(${1:'this/string'}, ${2:'/'});\n",
    "description": "Determine if a given string matches a given pattern. Asterisks may be used to indicate wildcards.",
    "scope": "source.php"
  },
  "helpers.str_is": {
    "prefix": "helpers.str_is",
    "body": "\nstr_is(${1:'foo*'}, ${2:'foobar'});\n",
    "description": "Add a single instance of the given needle to the haystack. Remove any extra instances.",
    "scope": "source.php"
  },
  "helpers.str_limit": {
    "prefix": "helpers.str_limit",
    "body": "\nstr_limit(${1:$$value}, ${2:100})\n",
    "description": "Limit the number of characters in a string.",
    "scope": "source.php"
  },
  "helpers.str_random": {
    "prefix": "helpers.str_random",
    "body": "\nstr_random(${1:40});\n",
    "description": "Generate a random string of the given length.",
    "scope": "source.php"
  },
  "helpers.str_singular": {
    "prefix": "helpers.str_singular",
    "body": "\nstr_singular(${1:'string'});\n",
    "description": "Convert a string to its singular form (English only).",
    "scope": "source.php"
  },
  "helpers.str_slug": {
    "prefix": "helpers.str_slug",
    "body": "\nstr_slug(${1:'fooBar'});\n",
    "description": "Generate a URL friendly \"slug\" from a given string.",
    "scope": "source.php"
  },
  "helpers.studly_case": {
    "prefix": "helpers.studly_case",
    "body": "\nstudly_case(${1:'foo_bar'});\n",
    "description": "Convert the given string to StudlyCase.",
    "scope": "source.php"
  },
  "helpers.title_case": {
    "prefix": "helpers.title_case",
    "body": "\ntitle_case(${1:'fooBar'});\n",
    "description": "Convert a value to title case.",
    "scope": "source.php"
  },
  "helpers.trans": {
    "prefix": "helpers.trans",
    "body": "\ntrans(${1:'validation.required'}):\n",
    "description": "Translate a given language line. Alias of Lang::get.",
    "scope": "source.php"
  },
  "helpers.trans_choice": {
    "prefix": "helpers.trans_choice",
    "body": "\ntrans_choice(${1:'foo.bar'}, ${2:$$count});\n",
    "description": "Translate a given language line with inflection. Alias of Lang::choice.",
    "scope": "source.php"
  },
  "helpers.str_plural": {
    "prefix": "helpers.str_plural",
    "body": "\nstr_plural(${1:'string'});\n",
    "description": "Convert a string to its plural form (English only).",
    "scope": "source.php"
  },
  "helpers.action": {
    "prefix": "helpers.action",
    "body": "\naction(${1:'HomeController@getIndex'}, ${2:$$params});\n",
    "description": "Generate a URL for a given controller action.",
    "scope": "source.php"
  },
  "helpers.asset": {
    "prefix": "helpers.asset",
    "body": "\nasset(${1:'img/photo.jpg'});\n",
    "description": "Generate a URL for an asset.",
    "scope": "source.php"
  },
  "helpers.route": {
    "prefix": "helpers.route",
    "body": "\nroute(${1:'routeName'}, ${2:$$params});\n",
    "description": "Generate a URL for a given named route.",
    "scope": "source.php"
  },
  "helpers.secure_asset": {
    "prefix": "helpers.secure_asset",
    "body": "\nsecure_asset(${1:'foo/bar'}, ${2:$$title}, ${3:$$attributes});\n",
    "description": "Generate a HTML link to the given asset using HTTPS.",
    "scope": "source.php"
  },
  "helpers.secure_url": {
    "prefix": "helpers.secure_url",
    "body": "\nsecure_url(${1:'foo/bar'}, ${2:$$parameters});\n",
    "description": "Generate a fully qualified URL to a given path using HTTPS.",
    "scope": "source.php"
  },
  "helpers.url": {
    "prefix": "helpers.url",
    "body": "\nurl(${1:'foo/bar'}, ${2:$$parameters}, ${3:$$secure});\n",
    "description": "Generate a fully qualified URL to the given path.",
    "scope": "source.php"
  }
}